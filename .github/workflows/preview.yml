name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: ./frontend
        run: |
          vercel link --yes --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ github.token }}
          environment-url: https://capstone-pr-${{ github.event.pull_request.number }}.vercel.app
          environment: preview
          description: "Preview deployment for PR #${{ github.event.pull_request.number }}"

      - name: Deploy to Vercel
        id: deploy
        working-directory: ./frontend
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NEXT_PUBLIC_API_URL: https://capstone-production-e2db.up.railway.app
        run: |
          # Deploy without promotion (preview deployment)
          DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --yes --scope=${{ secrets.VERCEL_ORG_ID }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        if: always()
        with:
          token: ${{ github.token }}
          environment-url: ${{ steps.deploy.outputs.deployment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: ${{ job.status }}

      - name: Comment on PR
        uses: actions/github-script@v6
        if: success()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment_url }}';
            const prNumber = context.issue.number;

            const comment = `## ðŸš€ Preview Deployment Ready!

            Your preview deployment is available at: ${deploymentUrl}

            ### Preview Details:
            - **PR**: #${prNumber}
            - **Commit**: \`${context.sha.substring(0, 7)}\`
            - **Branch**: \`${context.payload.pull_request.head.ref}\`
            - **Status**: âœ… Ready

            ### What's Next?
            1. Click the preview link above to test your changes
            2. Run through the test checklist
            3. Get approval from reviewers
            4. Merge when ready!

            ---
            *This preview will be automatically updated when you push new commits.*`;

            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview Deployment Ready')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        if: success()
        with:
          urls: |
            ${{ steps.deploy.outputs.deployment_url }}
            ${{ steps.deploy.outputs.deployment_url }}/search
            ${{ steps.deploy.outputs.deployment_url }}/documentation
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Comment Lighthouse results
        uses: actions/github-script@v6
        if: success()
        env:
          LIGHTHOUSE_RESULTS: ${{ steps.lighthouse.outputs.manifest }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = JSON.parse(process.env.LIGHTHOUSE_RESULTS || '[]');
            if (results.length === 0) return;

            const formatScore = (score) => {
              const percentage = Math.round(score * 100);
              if (percentage >= 90) return `ðŸŸ¢ ${percentage}`;
              if (percentage >= 50) return `ðŸŸ¡ ${percentage}`;
              return `ðŸ”´ ${percentage}`;
            };

            let comment = '## ðŸ“Š Lighthouse Performance Results\n\n';

            results.forEach(result => {
              const { url, summary } = result;
              const pageName = new URL(url).pathname || '/';

              comment += `### Page: \`${pageName}\`\n`;
              comment += `| Metric | Score |\n`;
              comment += `|--------|-------|\n`;
              comment += `| Performance | ${formatScore(summary.performance)} |\n`;
              comment += `| Accessibility | ${formatScore(summary.accessibility)} |\n`;
              comment += `| Best Practices | ${formatScore(summary['best-practices'])} |\n`;
              comment += `| SEO | ${formatScore(summary.seo)} |\n\n`;
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment,
            });
