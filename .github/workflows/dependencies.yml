name: Dependency Management

on:
  schedule:
    # Run every Monday at 9am UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Check for outdated dependencies - Backend
        working-directory: ./backend
        run: |
          echo "## Backend Dependency Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Install dependencies first
          npm ci

          # Check for outdated packages
          echo "### Outdated Packages" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          npm outdated || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Check for outdated dependencies - Frontend
        working-directory: ./frontend
        run: |
          echo "## Frontend Dependency Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Install dependencies first
          npm ci

          # Check for outdated packages
          echo "### Outdated Packages" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          npm outdated || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Security audit - Backend
        working-directory: ./backend
        run: |
          echo "## Backend Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run audit and capture output
          npm audit --json > audit-result.json || true

          # Parse and display results
          if [ -f audit-result.json ]; then
            vulnerabilities=$(cat audit-result.json | jq '.metadata.vulnerabilities')

            echo "### Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
            echo "- Critical: $(echo $vulnerabilities | jq '.critical')" >> $GITHUB_STEP_SUMMARY
            echo "- High: $(echo $vulnerabilities | jq '.high')" >> $GITHUB_STEP_SUMMARY
            echo "- Moderate: $(echo $vulnerabilities | jq '.moderate')" >> $GITHUB_STEP_SUMMARY
            echo "- Low: $(echo $vulnerabilities | jq '.low')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security audit - Frontend
        working-directory: ./frontend
        run: |
          echo "## Frontend Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run audit and capture output
          npm audit --json > audit-result.json || true

          # Parse and display results
          if [ -f audit-result.json ]; then
            vulnerabilities=$(cat audit-result.json | jq '.metadata.vulnerabilities')

            echo "### Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
            echo "- Critical: $(echo $vulnerabilities | jq '.critical')" >> $GITHUB_STEP_SUMMARY
            echo "- High: $(echo $vulnerabilities | jq '.high')" >> $GITHUB_STEP_SUMMARY
            echo "- Moderate: $(echo $vulnerabilities | jq '.moderate')" >> $GITHUB_STEP_SUMMARY
            echo "- Low: $(echo $vulnerabilities | jq '.low')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

  create-update-pr:
    name: Create Update PR
    runs-on: ubuntu-latest
    needs: [check-dependencies, security-audit]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Update dependencies
        run: |
          # Create a new branch
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="deps/update-$(date +%Y%m%d)"
          git checkout -b $BRANCH_NAME

          # Update backend dependencies
          cd backend
          echo "Updating backend dependencies..."
          npm update
          npm audit fix || true
          cd ..

          # Update frontend dependencies
          cd frontend
          echo "Updating frontend dependencies..."
          npm update
          npm audit fix || true
          cd ..

          # Check if there are changes
          if git diff --quiet; then
            echo "No dependency updates available"
            exit 0
          fi

          # Commit changes
          git add -A
          git commit -m "chore: update dependencies $(date +%Y-%m-%d)"

          # Push branch
          git push origin $BRANCH_NAME

          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request
        if: env.BRANCH_NAME != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = process.env.BRANCH_NAME;
            const date = new Date().toLocaleDateString('en-GB');

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: dependency updates - ${date}`,
              head: branchName,
              base: 'main',
              body: `## ðŸ”„ Automated Dependency Updates

              This PR contains automated dependency updates for both frontend and backend packages.

              ### What's Included:
              - âœ… Updated npm packages to their latest compatible versions
              - âœ… Applied security fixes where available
              - âœ… Updated lockfiles

              ### Next Steps:
              1. Review the changes in package.json and package-lock.json files
              2. Check the test results from CI
              3. Deploy to a preview environment and test functionality
              4. Merge if all tests pass

              ---
              *This PR was automatically created by the dependency management workflow.*`,
            });

            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['dependencies', 'automated']
            });

  notify-vulnerabilities:
    name: Notify Critical Vulnerabilities
    runs-on: ubuntu-latest
    needs: security-audit
    if: failure()

    steps:
      - name: Create Issue for Critical Vulnerabilities
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const date = new Date().toLocaleDateString('en-GB');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Security: Critical vulnerabilities detected - ${date}`,
              body: `## Critical Security Vulnerabilities Detected

              The automated security audit has detected critical vulnerabilities in the project dependencies.

              ### Required Actions:
              1. Run \`npm audit\` in both frontend and backend directories
              2. Review the security advisories
              3. Update affected packages immediately
              4. Run tests to ensure nothing breaks

              ### Commands to Fix:
              \`\`\`bash
              # Backend
              cd backend
              npm audit
              npm audit fix

              # Frontend
              cd frontend
              npm audit
              npm audit fix
              \`\`\`

              **Priority: HIGH** - Please address these vulnerabilities as soon as possible.`,
              labels: ['security', 'high-priority', 'dependencies']
            });
