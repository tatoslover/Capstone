name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    uses: ./.github/workflows/test.yml

  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd backend
          railway up

      - name: Health check
        run: |
          echo "Waiting for backend to be ready..."
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" https://capstone-production-e2db.up.railway.app/health)
          if [ $response -eq 200 ]; then
            echo "✅ Backend is healthy"
          else
            echo "❌ Backend health check failed with status $response"
            exit 1
          fi

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [test, deploy-backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        working-directory: ./frontend
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: ./frontend
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        working-directory: ./frontend
        run: |
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Frontend health check
        run: |
          echo "Waiting for frontend to be ready..."
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" https://capstone-rho-wheat.vercel.app)
          if [ $response -eq 200 ]; then
            echo "✅ Frontend is healthy"
          else
            echo "❌ Frontend health check failed with status $response"
            exit 1
          fi

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: success()

    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Services:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: https://capstone-production-e2db.up.railway.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: https://capstone-rho-wheat.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Info:" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY

      - name: Notify deployment (optional)
        run: |
          echo "Deployment completed successfully!"
          # Add notification logic here (Slack, Discord, email, etc.)

      - name: Verify API endpoints
        run: |
          echo "Verifying API endpoints..."

          # Check backend health
          curl -f https://capstone-production-e2db.up.railway.app/health || exit 1

          # Check API docs
          curl -f https://capstone-production-e2db.up.railway.app/api-docs || exit 1

          echo "✅ All endpoints verified"

      - name: Performance check
        run: |
          echo "Running basic performance check..."

          # Time the frontend load
          start_time=$(date +%s)
          curl -s https://capstone-rho-wheat.vercel.app > /dev/null
          end_time=$(date +%s)
          load_time=$((end_time - start_time))

          echo "Frontend load time: ${load_time}s"

          if [ $load_time -gt 5 ]; then
            echo "⚠️ Warning: Frontend load time is slow (${load_time}s)"
          else
            echo "✅ Frontend load time is acceptable"
          fi

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: failure()

    steps:
      - name: Rollback notification
        run: |
          echo "## ❌ Deployment Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The deployment has failed and may need manual intervention." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Failed Jobs:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Deploy: ${{ needs.deploy-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Deploy: ${{ needs.deploy-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the logs for specific errors" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix the issues locally" >> $GITHUB_STEP_SUMMARY
          echo "3. Push a new commit to trigger deployment" >> $GITHUB_STEP_SUMMARY

      # Add actual rollback logic here if needed
      # For example, redeploy the last known good version
