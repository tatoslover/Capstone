{"version":3,"sources":["/Users/samuellove/Documents/GitHub/Plansewalker-s-Primer/frontend/tests/user-interaction.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Simple mock component for testing user interactions\nconst MockUserForm = () => {\n  const [username, setUsername] = React.useState('');\n  const [users, setUsers] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!username.trim()) return;\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: username.trim() })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create user');\n      }\n\n      const newUser = await response.json();\n      setUsers(prev => [...prev, newUser]);\n      setUsername('');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div data-testid=\"user-form\">\n      <h2>User Management</h2>\n\n      {error && (\n        <div data-testid=\"error-message\" style={{ color: 'red' }}>\n          {error}\n        </div>\n      )}\n\n      <form onSubmit={handleSubmit} data-testid=\"form\">\n        <div>\n          <label htmlFor=\"username\">Username:</label>\n          <input\n            id=\"username\"\n            type=\"text\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            disabled={loading}\n            data-testid=\"username-input\"\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          disabled={loading || !username.trim()}\n          data-testid=\"submit-button\"\n        >\n          {loading ? 'Creating...' : 'Create User'}\n        </button>\n      </form>\n\n      <div data-testid=\"user-list\">\n        <h3>Users ({users.length})</h3>\n        {users.map(user => (\n          <div key={user.id} data-testid={`user-${user.id}`}>\n            {user.username}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\ndescribe('User Interaction Tests', () => {\n  beforeEach(() => {\n    fetch.mockClear();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Form Rendering', () => {\n    test('should render user form correctly', () => {\n      render(<MockUserForm />);\n\n      expect(screen.getByTestId('user-form')).toBeInTheDocument();\n      expect(screen.getByText('User Management')).toBeInTheDocument();\n      expect(screen.getByLabelText('Username:')).toBeInTheDocument();\n      expect(screen.getByTestId('submit-button')).toBeInTheDocument();\n      expect(screen.getByText('Users (0)')).toBeInTheDocument();\n    });\n\n    test('should disable submit button when username is empty', () => {\n      render(<MockUserForm />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      expect(submitButton).toBeDisabled();\n    });\n\n    test('should enable submit button when username is entered', async () => {\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      const usernameInput = screen.getByTestId('username-input');\n      const submitButton = screen.getByTestId('submit-button');\n\n      await user.type(usernameInput, 'testuser');\n\n      expect(submitButton).not.toBeDisabled();\n    });\n  });\n\n  describe('User Creation Flow', () => {\n    test('should create user successfully', async () => {\n      const mockUser = {\n        id: 1,\n        username: 'testuser',\n        created_at: '2023-01-01T00:00:00Z'\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUser\n      });\n\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      // Fill in the form\n      const usernameInput = screen.getByTestId('username-input');\n      await user.type(usernameInput, 'testuser');\n\n      // Submit the form\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Verify API was called\n      expect(fetch).toHaveBeenCalledWith('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: 'testuser' })\n      });\n\n      // Verify user appears in list\n      await waitFor(() => {\n        expect(screen.getByText('Users (1)')).toBeInTheDocument();\n        expect(screen.getByTestId('user-1')).toBeInTheDocument();\n        expect(screen.getByText('testuser')).toBeInTheDocument();\n      });\n\n      // Verify form is reset\n      expect(usernameInput.value).toBe('');\n    });\n\n    test('should handle API errors gracefully', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({ error: 'Username already exists' })\n      });\n\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      const usernameInput = screen.getByTestId('username-input');\n      await user.type(usernameInput, 'duplicateuser');\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toBeInTheDocument();\n        expect(screen.getByText('Username already exists')).toBeInTheDocument();\n      });\n\n      // Form should still have the username\n      expect(usernameInput.value).toBe('duplicateuser');\n    });\n\n    test('should show loading state during submission', async () => {\n      // Create a promise that never resolves to simulate loading\n      fetch.mockImplementationOnce(() => new Promise(() => {}));\n\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      const usernameInput = screen.getByTestId('username-input');\n      await user.type(usernameInput, 'testuser');\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Should show loading state\n      expect(screen.getByText('Creating...')).toBeInTheDocument();\n      expect(submitButton).toBeDisabled();\n      expect(usernameInput).toBeDisabled();\n    });\n\n    test('should trim whitespace from username', async () => {\n      const mockUser = {\n        id: 1,\n        username: 'trimmeduser',\n        created_at: '2023-01-01T00:00:00Z'\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUser\n      });\n\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      const usernameInput = screen.getByTestId('username-input');\n      await user.type(usernameInput, '  trimmeduser  ');\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      expect(fetch).toHaveBeenCalledWith('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: 'trimmeduser' })\n      });\n    });\n  });\n\n  describe('Multiple Users', () => {\n    test('should handle creating multiple users', async () => {\n      const users = [\n        { id: 1, username: 'user1', created_at: '2023-01-01T00:00:00Z' },\n        { id: 2, username: 'user2', created_at: '2023-01-02T00:00:00Z' }\n      ];\n\n      // Mock successful responses for both users\n      fetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => users[0]\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => users[1]\n        });\n\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      const usernameInput = screen.getByTestId('username-input');\n      const submitButton = screen.getByTestId('submit-button');\n\n      // Create first user\n      await user.type(usernameInput, 'user1');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('Users (1)')).toBeInTheDocument();\n        expect(screen.getByTestId('user-1')).toBeInTheDocument();\n      });\n\n      // Create second user\n      await user.type(usernameInput, 'user2');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('Users (2)')).toBeInTheDocument();\n        expect(screen.getByTestId('user-1')).toBeInTheDocument();\n        expect(screen.getByTestId('user-2')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Keyboard Navigation', () => {\n    test('should submit form when Enter is pressed in input', async () => {\n      const mockUser = {\n        id: 1,\n        username: 'keyboarduser',\n        created_at: '2023-01-01T00:00:00Z'\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUser\n      });\n\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      const usernameInput = screen.getByTestId('username-input');\n      await user.type(usernameInput, 'keyboarduser');\n      await user.keyboard('{Enter}');\n\n      expect(fetch).toHaveBeenCalledWith('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: 'keyboarduser' })\n      });\n\n      await waitFor(() => {\n        expect(screen.getByTestId('user-1')).toBeInTheDocument();\n      });\n    });\n\n    test('should focus submit button when tabbing from input', async () => {\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      const usernameInput = screen.getByTestId('username-input');\n      const submitButton = screen.getByTestId('submit-button');\n\n      // Focus input and add text to enable button\n      await user.click(usernameInput);\n      await user.type(usernameInput, 'test');\n\n      // Tab to next element (submit button)\n      await user.tab();\n\n      expect(submitButton).toHaveFocus();\n    });\n  });\n\n  describe('Accessibility', () => {\n    test('should have proper form labels and structure', () => {\n      render(<MockUserForm />);\n\n      const usernameInput = screen.getByLabelText('Username:');\n      expect(usernameInput).toHaveAttribute('id', 'username');\n      expect(usernameInput).toHaveAttribute('type', 'text');\n\n      const form = screen.getByTestId('form');\n      expect(form).toHaveAttribute('data-testid', 'form');\n    });\n\n    test('should announce error messages to screen readers', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({ error: 'Validation failed' })\n      });\n\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      await user.type(screen.getByTestId('username-input'), 'invalid');\n      await user.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        const errorMessage = screen.getByTestId('error-message');\n        expect(errorMessage).toBeInTheDocument();\n        expect(errorMessage).toHaveTextContent('Validation failed');\n      });\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('should handle network errors', async () => {\n      fetch.mockRejectedValueOnce(new Error('Network error'));\n\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      await user.type(screen.getByTestId('username-input'), 'networktest');\n      await user.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        expect(screen.getByText('Network error')).toBeInTheDocument();\n      });\n    });\n\n    test('should not submit empty username after trimming', async () => {\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      const usernameInput = screen.getByTestId('username-input');\n      const submitButton = screen.getByTestId('submit-button');\n\n      // Type only spaces\n      await user.type(usernameInput, '   ');\n\n      // Submit button should still be disabled\n      expect(submitButton).toBeDisabled();\n\n      // Clicking shouldn't trigger API call\n      await user.click(submitButton);\n      expect(fetch).not.toHaveBeenCalled();\n    });\n\n    test('should handle invalid JSON response', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        json: async () => {\n          throw new Error('Invalid JSON');\n        }\n      });\n\n      const user = userEvent.setup();\n      render(<MockUserForm />);\n\n      await user.type(screen.getByTestId('username-input'), 'jsontest');\n      await user.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        expect(screen.getByText('Failed to create user')).toBeInTheDocument();\n      });\n    });\n  });\n});\n"],"names":["global","fetch","jest","fn","MockUserForm","username","setUsername","React","useState","users","setUsers","loading","setLoading","error","setError","handleSubmit","e","preventDefault","trim","response","method","headers","body","JSON","stringify","ok","errorData","json","Error","newUser","prev","err","message","div","data-testid","h2","style","color","form","onSubmit","label","htmlFor","input","id","type","value","onChange","target","disabled","button","h3","length","map","user","describe","beforeEach","mockClear","afterEach","resetAllMocks","test","render","expect","screen","getByTestId","toBeInTheDocument","getByText","getByLabelText","submitButton","toBeDisabled","userEvent","setup","usernameInput","not","mockUser","created_at","mockResolvedValueOnce","click","toHaveBeenCalledWith","waitFor","toBe","mockImplementationOnce","Promise","keyboard","tab","toHaveFocus","toHaveAttribute","errorMessage","toHaveTextContent","mockRejectedValueOnce","toHaveBeenCalled"],"mappings":"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"}