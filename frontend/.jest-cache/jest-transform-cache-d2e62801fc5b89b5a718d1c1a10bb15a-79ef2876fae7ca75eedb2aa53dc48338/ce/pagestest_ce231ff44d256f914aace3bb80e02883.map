{"version":3,"sources":["/Users/samuellove/Documents/GitHub/Plansewalker-s-Primer/frontend/tests/pages.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport { useRouter } from 'next/router';\n\n// Mock Next.js router\njest.mock('next/router', () => ({\n  useRouter: jest.fn(),\n}));\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\nglobal.localStorage = localStorageMock;\n\n// Mock components that are too complex for testing\njest.mock('../components/Layout/Layout', () => {\n  return function MockLayout({ children }) {\n    return <div data-testid=\"layout\">{children}</div>;\n  };\n});\n\njest.mock('../components/User/UserSelector', () => {\n  return function MockUserSelector({ onUserSelect, currentUser }) {\n    return (\n      <div data-testid=\"user-selector\">\n        <button\n          onClick={() => onUserSelect({ id: 1, username: 'testuser' })}\n          data-testid=\"select-user-btn\"\n        >\n          Select User\n        </button>\n        {currentUser && (\n          <div data-testid=\"current-user\">\n            Current: {currentUser.username}\n          </div>\n        )}\n      </div>\n    );\n  };\n});\n\njest.mock('../components/UI/Loading', () => {\n  return function MockLoading() {\n    return <div data-testid=\"loading\">Loading...</div>;\n  };\n});\n\n// Import pages after mocking dependencies\nconst Home = require('../pages/index').default;\n\ndescribe('Pages Tests', () => {\n  const mockPush = jest.fn();\n  const mockReplace = jest.fn();\n\n  beforeEach(() => {\n    useRouter.mockReturnValue({\n      route: '/',\n      pathname: '/',\n      query: {},\n      asPath: '/',\n      push: mockPush,\n      replace: mockReplace,\n    });\n\n    fetch.mockClear();\n    localStorageMock.getItem.mockClear();\n    localStorageMock.setItem.mockClear();\n    localStorageMock.removeItem.mockClear();\n    mockPush.mockClear();\n    mockReplace.mockClear();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Home Page', () => {\n    test('should render home page layout', () => {\n      render(<Home />);\n\n      expect(screen.getByTestId('layout')).toBeInTheDocument();\n      expect(screen.getByTestId('user-selector')).toBeInTheDocument();\n    });\n\n    test('should load user from localStorage on mount', () => {\n      const savedUser = { id: 1, username: 'saveduser' };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      render(<Home />);\n\n      expect(localStorageMock.getItem).toHaveBeenCalledWith('currentUser');\n      expect(screen.getByTestId('current-user')).toBeInTheDocument();\n      expect(screen.getByText('Current: saveduser')).toBeInTheDocument();\n    });\n\n    test('should handle invalid localStorage data gracefully', () => {\n      localStorageMock.getItem.mockReturnValue('invalid json');\n\n      render(<Home />);\n\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith('currentUser');\n    });\n\n    test('should save user to localStorage when selected', async () => {\n      const user = userEvent.setup();\n      render(<Home />);\n\n      await user.click(screen.getByTestId('select-user-btn'));\n\n      expect(localStorageMock.setItem).toHaveBeenCalledWith(\n        'currentUser',\n        JSON.stringify({ id: 1, username: 'testuser' })\n      );\n    });\n\n    test('should remove user from localStorage when deselected', () => {\n      // This would require more complex interaction\n      // For now, we test the basic localStorage integration\n      expect(localStorageMock.removeItem).toBeDefined();\n    });\n\n    test('should render main navigation sections', () => {\n      render(<Home />);\n\n      // Check for key content sections that should be present\n      // Note: This is simplified as the actual Home component is very complex\n      expect(screen.getByTestId('layout')).toBeInTheDocument();\n    });\n  });\n\n  describe('Search Page', () => {\n    // Mock the Search page component\n    const MockSearchPage = () => {\n      const [searchQuery, setSearchQuery] = React.useState('');\n      const [searchResults, setSearchResults] = React.useState([]);\n      const [loading, setLoading] = React.useState(false);\n\n      const handleSearch = async (query) => {\n        setLoading(true);\n        try {\n          const response = await fetch(`/api/cards/search?q=${query}`);\n          const data = await response.json();\n          setSearchResults(data.data || []);\n        } catch (error) {\n          console.error('Search failed:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      return (\n        <div data-testid=\"search-page\">\n          <h1>Card Search</h1>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              handleSearch(searchQuery);\n            }}\n            data-testid=\"search-form\"\n          >\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search for cards...\"\n              data-testid=\"search-input\"\n            />\n            <button type=\"submit\" disabled={loading} data-testid=\"search-button\">\n              {loading ? 'Searching...' : 'Search'}\n            </button>\n          </form>\n          {loading && <div data-testid=\"search-loading\">Searching...</div>}\n          <div data-testid=\"search-results\">\n            {searchResults.map((card, index) => (\n              <div key={index} data-testid={`card-${index}`}>\n                {card.name}\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    };\n\n    test('should render search page correctly', () => {\n      render(<MockSearchPage />);\n\n      expect(screen.getByTestId('search-page')).toBeInTheDocument();\n      expect(screen.getByText('Card Search')).toBeInTheDocument();\n      expect(screen.getByTestId('search-form')).toBeInTheDocument();\n      expect(screen.getByTestId('search-input')).toBeInTheDocument();\n      expect(screen.getByTestId('search-button')).toBeInTheDocument();\n    });\n\n    test('should handle search input changes', async () => {\n      const user = userEvent.setup();\n      render(<MockSearchPage />);\n\n      const searchInput = screen.getByTestId('search-input');\n      await user.type(searchInput, 'lightning bolt');\n\n      expect(searchInput.value).toBe('lightning bolt');\n    });\n\n    test('should perform search when form is submitted', async () => {\n      const mockSearchData = {\n        data: [\n          { name: 'Lightning Bolt', id: '1' },\n          { name: 'Lightning Strike', id: '2' }\n        ]\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockSearchData\n      });\n\n      const user = userEvent.setup();\n      render(<MockSearchPage />);\n\n      const searchInput = screen.getByTestId('search-input');\n      const searchButton = screen.getByTestId('search-button');\n\n      await user.type(searchInput, 'lightning');\n      await user.click(searchButton);\n\n      expect(fetch).toHaveBeenCalledWith('/api/cards/search?q=lightning');\n\n      await waitFor(() => {\n        expect(screen.getByTestId('card-0')).toBeInTheDocument();\n        expect(screen.getByText('Lightning Bolt')).toBeInTheDocument();\n        expect(screen.getByText('Lightning Strike')).toBeInTheDocument();\n      });\n    });\n\n    test('should show loading state during search', async () => {\n      fetch.mockImplementation(() => new Promise(() => {})); // Never resolves\n\n      const user = userEvent.setup();\n      render(<MockSearchPage />);\n\n      const searchInput = screen.getByTestId('search-input');\n      const searchButton = screen.getByTestId('search-button');\n\n      await user.type(searchInput, 'test');\n      await user.click(searchButton);\n\n      expect(screen.getByTestId('search-loading')).toBeInTheDocument();\n      expect(screen.getByText('Searching...')).toBeInTheDocument();\n      expect(searchButton).toBeDisabled();\n    });\n  });\n\n  describe('Favourites Page', () => {\n    const MockFavouritesPage = () => {\n      const [favourites, setFavourites] = React.useState([]);\n      const [loading, setLoading] = React.useState(true);\n      const [currentUser] = React.useState({ id: 1, username: 'testuser' });\n\n      React.useEffect(() => {\n        const loadFavourites = async () => {\n          if (!currentUser) return;\n\n          try {\n            const response = await fetch(`/api/favorites/${currentUser.id}`);\n            const data = await response.json();\n            setFavourites(data);\n          } catch (error) {\n            console.error('Failed to load favourites:', error);\n          } finally {\n            setLoading(false);\n          }\n        };\n\n        loadFavourites();\n      }, [currentUser]);\n\n      const removeFavourite = async (favouriteId) => {\n        try {\n          await fetch(`/api/favorites/${favouriteId}`, { method: 'DELETE' });\n          setFavourites(favourites.filter(fav => fav.id !== favouriteId));\n        } catch (error) {\n          console.error('Failed to remove favourite:', error);\n        }\n      };\n\n      if (loading) {\n        return <div data-testid=\"favourites-loading\">Loading favourites...</div>;\n      }\n\n      return (\n        <div data-testid=\"favourites-page\">\n          <h1>My Favourite Cards</h1>\n          {!currentUser && (\n            <div data-testid=\"no-user\">Please select a user first</div>\n          )}\n          {currentUser && favourites.length === 0 && (\n            <div data-testid=\"no-favourites\">No favourite cards yet</div>\n          )}\n          <div data-testid=\"favourites-list\">\n            {favourites.map((favourite) => (\n              <div key={favourite.id} data-testid={`favourite-${favourite.id}`}>\n                <h3>{favourite.card_name}</h3>\n                <p>{favourite.notes}</p>\n                <button\n                  onClick={() => removeFavourite(favourite.id)}\n                  data-testid={`remove-${favourite.id}`}\n                >\n                  Remove\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    };\n\n    test('should render favourites page correctly', () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => []\n      });\n\n      render(<MockFavouritesPage />);\n\n      expect(screen.getByTestId('favourites-loading')).toBeInTheDocument();\n    });\n\n    test('should load user favourites on mount', async () => {\n      const mockFavourites = [\n        {\n          id: 1,\n          card_name: 'Lightning Bolt',\n          notes: 'Great damage spell',\n          user_id: 1\n        },\n        {\n          id: 2,\n          card_name: 'Counterspell',\n          notes: 'Essential counter magic',\n          user_id: 1\n        }\n      ];\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockFavourites\n      });\n\n      render(<MockFavouritesPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Lightning Bolt')).toBeInTheDocument();\n        expect(screen.getByText('Counterspell')).toBeInTheDocument();\n        expect(screen.getByText('Great damage spell')).toBeInTheDocument();\n        expect(screen.getByText('Essential counter magic')).toBeInTheDocument();\n      });\n\n      expect(fetch).toHaveBeenCalledWith('/api/favorites/1');\n    });\n\n    test('should show empty state when no favourites', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => []\n      });\n\n      render(<MockFavouritesPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('no-favourites')).toBeInTheDocument();\n      });\n    });\n\n    test('should handle removing favourites', async () => {\n      const mockFavourites = [\n        {\n          id: 1,\n          card_name: 'Lightning Bolt',\n          notes: 'Great damage spell',\n          user_id: 1\n        }\n      ];\n\n      fetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockFavourites\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ message: 'Favourite removed' })\n        });\n\n      const user = userEvent.setup();\n      render(<MockFavouritesPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Lightning Bolt')).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByTestId('remove-1'));\n\n      expect(fetch).toHaveBeenCalledWith('/api/favorites/1', {\n        method: 'DELETE'\n      });\n\n      await waitFor(() => {\n        expect(screen.queryByText('Lightning Bolt')).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Profile Page', () => {\n    const MockProfilePage = () => {\n      const [user, setUser] = React.useState(null);\n      const [editing, setEditing] = React.useState(false);\n      const [newUsername, setNewUsername] = React.useState('');\n\n      React.useEffect(() => {\n        const savedUser = localStorage.getItem('currentUser');\n        if (savedUser) {\n          setUser(JSON.parse(savedUser));\n        }\n      }, []);\n\n      const updateProfile = async () => {\n        if (!user || !newUsername.trim()) return;\n\n        try {\n          const response = await fetch(`/api/users/${user.id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ username: newUsername.trim() })\n          });\n\n          if (response.ok) {\n            const updatedUser = await response.json();\n            setUser(updatedUser);\n            localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n            setEditing(false);\n            setNewUsername('');\n          }\n        } catch (error) {\n          console.error('Failed to update profile:', error);\n        }\n      };\n\n      const deleteProfile = async () => {\n        if (!user) return;\n\n        try {\n          await fetch(`/api/users/${user.id}`, { method: 'DELETE' });\n          setUser(null);\n          localStorage.removeItem('currentUser');\n        } catch (error) {\n          console.error('Failed to delete profile:', error);\n        }\n      };\n\n      return (\n        <div data-testid=\"profile-page\">\n          <h1>User Profile</h1>\n          {!user && (\n            <div data-testid=\"no-user\">Please select a user first</div>\n          )}\n          {user && !editing && (\n            <div data-testid=\"profile-display\">\n              <h2>{user.username}</h2>\n              <p>Member since: {new Date(user.created_at).toLocaleDateString()}</p>\n              <button\n                onClick={() => {\n                  setEditing(true);\n                  setNewUsername(user.username);\n                }}\n                data-testid=\"edit-profile-btn\"\n              >\n                Edit Profile\n              </button>\n              <button\n                onClick={deleteProfile}\n                data-testid=\"delete-profile-btn\"\n                style={{ marginLeft: '1rem', background: 'red' }}\n              >\n                Delete Profile\n              </button>\n            </div>\n          )}\n          {user && editing && (\n            <div data-testid=\"profile-edit\">\n              <input\n                type=\"text\"\n                value={newUsername}\n                onChange={(e) => setNewUsername(e.target.value)}\n                data-testid=\"username-input\"\n              />\n              <button\n                onClick={updateProfile}\n                disabled={!newUsername.trim()}\n                data-testid=\"save-btn\"\n              >\n                Save\n              </button>\n              <button\n                onClick={() => {\n                  setEditing(false);\n                  setNewUsername('');\n                }}\n                data-testid=\"cancel-btn\"\n              >\n                Cancel\n              </button>\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    test('should render profile page correctly', () => {\n      localStorageMock.getItem.mockReturnValue(null);\n      render(<MockProfilePage />);\n\n      expect(screen.getByTestId('profile-page')).toBeInTheDocument();\n      expect(screen.getByText('User Profile')).toBeInTheDocument();\n      expect(screen.getByTestId('no-user')).toBeInTheDocument();\n    });\n\n    test('should load user from localStorage', () => {\n      const savedUser = {\n        id: 1,\n        username: 'testuser',\n        created_at: '2023-01-01T00:00:00Z'\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      render(<MockProfilePage />);\n\n      expect(screen.getByTestId('profile-display')).toBeInTheDocument();\n      expect(screen.getByText('testuser')).toBeInTheDocument();\n      expect(screen.getByText('Member since: 01/01/2023')).toBeInTheDocument();\n    });\n\n    test('should enter edit mode when edit button is clicked', async () => {\n      const savedUser = {\n        id: 1,\n        username: 'testuser',\n        created_at: '2023-01-01T00:00:00Z'\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      const user = userEvent.setup();\n      render(<MockProfilePage />);\n\n      await user.click(screen.getByTestId('edit-profile-btn'));\n\n      expect(screen.getByTestId('profile-edit')).toBeInTheDocument();\n      expect(screen.getByTestId('username-input')).toHaveValue('testuser');\n    });\n\n    test('should update profile when save is clicked', async () => {\n      const savedUser = {\n        id: 1,\n        username: 'testuser',\n        created_at: '2023-01-01T00:00:00Z'\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      const updatedUser = {\n        ...savedUser,\n        username: 'updateduser'\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => updatedUser\n      });\n\n      const user = userEvent.setup();\n      render(<MockProfilePage />);\n\n      await user.click(screen.getByTestId('edit-profile-btn'));\n\n      const usernameInput = screen.getByTestId('username-input');\n      await user.clear(usernameInput);\n      await user.type(usernameInput, 'updateduser');\n\n      await user.click(screen.getByTestId('save-btn'));\n\n      expect(fetch).toHaveBeenCalledWith('/api/users/1', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: 'updateduser' })\n      });\n\n      await waitFor(() => {\n        expect(localStorageMock.setItem).toHaveBeenCalledWith(\n          'currentUser',\n          JSON.stringify(updatedUser)\n        );\n      });\n    });\n\n    test('should delete profile when delete button is clicked', async () => {\n      const savedUser = {\n        id: 1,\n        username: 'testuser',\n        created_at: '2023-01-01T00:00:00Z'\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ message: 'User deleted' })\n      });\n\n      const user = userEvent.setup();\n      render(<MockProfilePage />);\n\n      await user.click(screen.getByTestId('delete-profile-btn'));\n\n      expect(fetch).toHaveBeenCalledWith('/api/users/1', {\n        method: 'DELETE'\n      });\n\n      await waitFor(() => {\n        expect(localStorageMock.removeItem).toHaveBeenCalledWith('currentUser');\n      });\n    });\n\n    test('should cancel editing when cancel button is clicked', async () => {\n      const savedUser = {\n        id: 1,\n        username: 'testuser',\n        created_at: '2023-01-01T00:00:00Z'\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      const user = userEvent.setup();\n      render(<MockProfilePage />);\n\n      await user.click(screen.getByTestId('edit-profile-btn'));\n      await user.click(screen.getByTestId('cancel-btn'));\n\n      expect(screen.getByTestId('profile-display')).toBeInTheDocument();\n      expect(screen.queryByTestId('profile-edit')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('API Test Page', () => {\n    const MockApiTestPage = () => {\n      const [apiStatus, setApiStatus] = React.useState('unknown');\n      const [testResults, setTestResults] = React.useState([]);\n\n      const testApiEndpoint = async (endpoint, method = 'GET') => {\n        try {\n          const response = await fetch(endpoint, { method });\n          const result = {\n            endpoint,\n            method,\n            status: response.status,\n            ok: response.ok,\n            timestamp: new Date().toISOString()\n          };\n          setTestResults(prev => [result, ...prev]);\n          return result;\n        } catch (error) {\n          const result = {\n            endpoint,\n            method,\n            status: 'Error',\n            ok: false,\n            error: error.message,\n            timestamp: new Date().toISOString()\n          };\n          setTestResults(prev => [result, ...prev]);\n          return result;\n        }\n      };\n\n      const runHealthCheck = async () => {\n        setApiStatus('testing');\n        const result = await testApiEndpoint('/health');\n        setApiStatus(result.ok ? 'healthy' : 'unhealthy');\n      };\n\n      const runFullApiTest = async () => {\n        const endpoints = [\n          { path: '/health', method: 'GET' },\n          { path: '/api/users', method: 'GET' },\n          { path: '/api/messages', method: 'GET' },\n          { path: '/api/cards/random', method: 'GET' }\n        ];\n\n        for (const endpoint of endpoints) {\n          await testApiEndpoint(endpoint.path, endpoint.method);\n        }\n      };\n\n      return (\n        <div data-testid=\"api-test-page\">\n          <h1>API Testing Dashboard</h1>\n          <div data-testid=\"api-status\">\n            Status: <span data-testid=\"status-value\">{apiStatus}</span>\n          </div>\n          <div>\n            <button onClick={runHealthCheck} data-testid=\"health-check-btn\">\n              Run Health Check\n            </button>\n            <button onClick={runFullApiTest} data-testid=\"full-test-btn\">\n              Run Full API Test\n            </button>\n          </div>\n          <div data-testid=\"test-results\">\n            <h2>Test Results</h2>\n            {testResults.map((result, index) => (\n              <div key={index} data-testid={`result-${index}`}>\n                <span>{result.method} {result.endpoint}</span>\n                <span data-testid={`status-${index}`}>{result.status}</span>\n                <span>{result.ok ? '✅' : '❌'}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    };\n\n    test('should render API test page correctly', () => {\n      render(<MockApiTestPage />);\n\n      expect(screen.getByTestId('api-test-page')).toBeInTheDocument();\n      expect(screen.getByText('API Testing Dashboard')).toBeInTheDocument();\n      expect(screen.getByTestId('health-check-btn')).toBeInTheDocument();\n      expect(screen.getByTestId('full-test-btn')).toBeInTheDocument();\n    });\n\n    test('should run health check when button is clicked', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ status: 'OK' })\n      });\n\n      const user = userEvent.setup();\n      render(<MockApiTestPage />);\n\n      await user.click(screen.getByTestId('health-check-btn'));\n\n      expect(fetch).toHaveBeenCalledWith('/health', { method: 'GET' });\n\n      await waitFor(() => {\n        expect(screen.getByTestId('status-value')).toHaveTextContent('healthy');\n      });\n    });\n\n    test('should run full API test when button is clicked', async () => {\n      // Mock responses for all endpoints\n      fetch\n        .mockResolvedValueOnce({ ok: true, status: 200 })\n        .mockResolvedValueOnce({ ok: true, status: 200 })\n        .mockResolvedValueOnce({ ok: true, status: 200 })\n        .mockResolvedValueOnce({ ok: true, status: 200 });\n\n      const user = userEvent.setup();\n      render(<MockApiTestPage />);\n\n      await user.click(screen.getByTestId('full-test-btn'));\n\n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalledTimes(4);\n        expect(screen.getByTestId('result-0')).toBeInTheDocument();\n      });\n\n      expect(fetch).toHaveBeenCalledWith('/health', { method: 'GET' });\n      expect(fetch).toHaveBeenCalledWith('/api/users', { method: 'GET' });\n      expect(fetch).toHaveBeenCalledWith('/api/messages', { method: 'GET' });\n      expect(fetch).toHaveBeenCalledWith('/api/cards/random', { method: 'GET' });\n    });\n\n    test('should handle API errors gracefully', async () => {\n      fetch.mockRejectedValueOnce(new Error('Network error'));\n\n      const user = userEvent.setup();\n      render(<MockApiTestPage />);\n\n      await user.click(screen.getByTestId('health-check-btn'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('status-value')).toHaveTextContent('unhealthy');\n        expect(screen.getByText('❌')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Navigation and Routing', () => {\n    test('should handle navigation between pages', () => {\n      // Test that router mock is working correctly\n      expect(useRouter).toHaveBeenCalled();\n      expect(mockPush).toBeDefined();\n      expect(mockReplace).toBeDefined();\n    });\n\n    test('should handle dynamic routes correctly', () => {\n      useRouter.mockReturnValue({\n        route: '/users/[id]',\n        pathname: '/users/[id]',\n        query: { id: '123' },\n        asPath: '/users/123',\n        push: mockPush,\n        replace: mockReplace,\n      });\n\n      // This would test dynamic routing if we had such pages\n      const mockRouter = useRouter();\n      expect(mockRouter.query.id).toBe('123');\n    });\n\n    test('should handle query parameters correctly', () => {\n      useRouter.mockReturnValue({\n        route: '/search',\n        pathname: '/search',\n        query: { q: 'lightning bolt', type: 'instant' },\n        asPath: '/search?q=lightning%20bolt&type=instant',\n        push: mockPush,\n        replace: mockReplace,\n      });\n\n      const mockRouter = useRouter();\n      expect(mockRouter.query.q).toBe('lightning bolt');\n      expect(mockRouter.query.type).toBe('instant');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle 404 errors appropriately', () => {\n      useRouter.mockReturnValue({\n        route: '/404',\n        pathname: '/404',\n        query: {},\n        asPath: '/404',\n        push: mockPush,\n        replace: mockReplace,\n      });\n\n      // This would test 404 handling if we had a 404 page\n      const mockRouter = useRouter();\n      expect(mockRouter.route).toBe('/404');\n    });\n\n    test('should handle server errors gracefully', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        json: async () => ({ error: 'Internal server error' })\n      });\n\n      // This would test error handling in components\n      expect(fetch).toBeDefined();\n    });\n  });\n});\n"],"names":["jest","mock","useRouter","fn","MockLayout","children","div","data-testid","MockUserSelector","onUserSelect","currentUser","button","onClick","id","username","MockLoading","global","fetch","localStorageMock","getItem","setItem","removeItem","clear","localStorage","Home","require","default","describe","mockPush","mockReplace","beforeEach","mockReturnValue","route","pathname","query","asPath","push","replace","mockClear","afterEach","resetAllMocks","test","render","expect","screen","getByTestId","toBeInTheDocument","savedUser","JSON","stringify","toHaveBeenCalledWith","getByText","user","userEvent","setup","click","toBeDefined","MockSearchPage","searchQuery","setSearchQuery","React","useState","searchResults","setSearchResults","loading","setLoading","handleSearch","response","data","json","error","console","h1","form","onSubmit","e","preventDefault","input","type","value","onChange","target","placeholder","disabled","map","card","index","name","searchInput","toBe","mockSearchData","mockResolvedValueOnce","ok","searchButton","waitFor","mockImplementation","Promise","toBeDisabled","MockFavouritesPage","favourites","setFavourites","useEffect","loadFavourites","removeFavourite","favouriteId","method","filter","fav","length","favourite","h3","card_name","p","notes","mockFavourites","user_id","message","queryByText","not","MockProfilePage","setUser","editing","setEditing","newUsername","setNewUsername","parse","updateProfile","trim","headers","body","updatedUser","deleteProfile","h2","Date","created_at","toLocaleDateString","style","marginLeft","background","toHaveValue","usernameInput","queryByTestId","MockApiTestPage","apiStatus","setApiStatus","testResults","setTestResults","testApiEndpoint","endpoint","result","status","timestamp","toISOString","prev","runHealthCheck","runFullApiTest","endpoints","path","span","toHaveTextContent","toHaveBeenCalledTimes","mockRejectedValueOnce","Error","toHaveBeenCalled","mockRouter","q"],"mappings":"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"}