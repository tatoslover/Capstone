{"version":3,"sources":["/Users/samuellove/Documents/GitHub/Capstone/frontend/tests/components.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport UserSelector from '../components/User/UserSelector';\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Mock Next.js router\njest.mock('next/router', () => ({\n  useRouter() {\n    return {\n      route: '/',\n      pathname: '/',\n      query: '',\n      asPath: '',\n      push: jest.fn(),\n      replace: jest.fn(),\n    };\n  },\n}));\n\ndescribe('UserSelector Component', () => {\n  let mockOnUserSelect;\n\n  beforeEach(() => {\n    mockOnUserSelect = jest.fn();\n    fetch.mockClear();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  const mockUsers = [\n    {\n      id: 1,\n      username: 'testuser1',\n      created_at: '2023-01-01T00:00:00Z'\n    },\n    {\n      id: 2,\n      username: 'testuser2',\n      created_at: '2023-01-02T00:00:00Z'\n    }\n  ];\n\n  describe('Loading State', () => {\n    test('should show loading spinner whilst fetching users', () => {\n      fetch.mockImplementation(() => new Promise(() => {})); // Never resolves\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      expect(screen.getByText('Loading users...')).toBeInTheDocument();\n      expect(screen.getByText('Loading users...')).toBeInTheDocument();\n    });\n  });\n\n  describe('User List Display', () => {\n    test('should render list of existing users', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('testuser1')).toBeInTheDocument();\n        expect(screen.getByText('testuser2')).toBeInTheDocument();\n      });\n\n      expect(screen.getByText('Existing Profiles')).toBeInTheDocument();\n    });\n\n    test('should show creation date for each user', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Created 01/01/2023')).toBeInTheDocument();\n        expect(screen.getByText('Created 02/01/2023')).toBeInTheDocument();\n      });\n    });\n\n    test('should call onUserSelect when user is clicked', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      const user = userEvent.setup();\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('testuser1')).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByText('testuser1'));\n\n      expect(mockOnUserSelect).toHaveBeenCalledWith(mockUsers[0]);\n    });\n  });\n\n  describe('Current User Display', () => {\n    test('should show current user information when provided', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      const currentUser = { id: 1, username: 'currentuser' };\n      render(\n        <UserSelector\n          onUserSelect={mockOnUserSelect}\n          currentUser={currentUser}\n        />\n      );\n\n      expect(screen.getByText('Currently logged in as:')).toBeInTheDocument();\n      expect(screen.getByText('currentuser')).toBeInTheDocument();\n      expect(screen.getByText('Switch User')).toBeInTheDocument();\n    });\n\n    test('should hide user selection when current user is set', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      const currentUser = { id: 1, username: 'currentuser' };\n      render(\n        <UserSelector\n          onUserSelect={mockOnUserSelect}\n          currentUser={currentUser}\n        />\n      );\n\n      await waitFor(() => {\n        expect(screen.queryByText('Existing Profiles')).not.toBeInTheDocument();\n        expect(screen.queryByText('Create New Profile')).not.toBeInTheDocument();\n      });\n    });\n\n    test('should call onUserSelect with null when switch user is clicked', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      const currentUser = { id: 1, username: 'currentuser' };\n      const user = userEvent.setup();\n\n      render(\n        <UserSelector\n          onUserSelect={mockOnUserSelect}\n          currentUser={currentUser}\n        />\n      );\n\n      await user.click(screen.getByText('Switch User'));\n\n      expect(mockOnUserSelect).toHaveBeenCalledWith(null);\n    });\n  });\n\n  describe('User Creation', () => {\n    test('should show create new profile button initially', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n    });\n\n    test('should show form when create new profile is clicked', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      const user = userEvent.setup();\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByText('+ Create New Profile'));\n\n      expect(screen.getByLabelText('Username')).toBeInTheDocument();\n      expect(screen.getByText('Create Profile')).toBeInTheDocument();\n      expect(screen.getByText('Cancel')).toBeInTheDocument();\n    });\n\n    test('should create new user when form is submitted', async () => {\n      fetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockUsers\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ id: 3, username: 'newuser', created_at: '2023-01-03T00:00:00Z' })\n        });\n\n      const user = userEvent.setup();\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      // Wait for initial load and click create button\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByText('+ Create New Profile'));\n\n      // Fill in the form\n      const usernameInput = screen.getByLabelText('Username');\n      await user.type(usernameInput, 'newuser');\n\n      // Submit the form\n      await user.click(screen.getByText('Create Profile'));\n\n      // Check that the API was called correctly\n      expect(fetch).toHaveBeenCalledWith(\n        'http://localhost:3001/api/users',\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ username: 'newuser' })\n        }\n      );\n\n      // Check that onUserSelect was called with the new user\n      await waitFor(() => {\n        expect(mockOnUserSelect).toHaveBeenCalledWith({\n          id: 3,\n          username: 'newuser',\n          created_at: '2023-01-03T00:00:00Z'\n        });\n      });\n    });\n\n    test('should disable create button when username is empty', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      const user = userEvent.setup();\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByText('+ Create New Profile'));\n\n      const createButton = screen.getByText('Create Profile');\n      expect(createButton).toBeDisabled();\n    });\n\n    test('should show error when user creation fails', async () => {\n      fetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockUsers\n        })\n        .mockResolvedValueOnce({\n          ok: false,\n          json: async () => ({ error: 'Username already exists' })\n        });\n\n      const user = userEvent.setup();\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByText('+ Create New Profile'));\n\n      const usernameInput = screen.getByLabelText('Username');\n      await user.type(usernameInput, 'duplicateuser');\n\n      await user.click(screen.getByText('Create Profile'));\n\n      await waitFor(() => {\n        expect(screen.getByText('Username already exists')).toBeInTheDocument();\n      });\n    });\n\n    test('should cancel form when cancel button is clicked', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      const user = userEvent.setup();\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByText('+ Create New Profile'));\n\n      const usernameInput = screen.getByLabelText('Username');\n      await user.type(usernameInput, 'testinput');\n\n      await user.click(screen.getByText('Cancel'));\n\n      // Form should be hidden\n      expect(screen.queryByLabelText('Username')).not.toBeInTheDocument();\n      expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should show error when failing to fetch users', async () => {\n      fetch.mockRejectedValueOnce(new Error('Network error'));\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Failed to load users')).toBeInTheDocument();\n      });\n    });\n\n    test('should show error when API returns error status', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500\n      });\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Failed to load users')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    test('should have proper ARIA labels and roles', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n\n      const user = userEvent.setup();\n      await user.click(screen.getByText('+ Create New Profile'));\n\n      const usernameInput = screen.getByLabelText('Username');\n      expect(usernameInput).toHaveAttribute('id', 'username');\n      expect(usernameInput).toHaveAttribute('type', 'text');\n    });\n\n    test('should be keyboard navigable', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      const user = userEvent.setup();\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('testuser1')).toBeInTheDocument();\n      });\n\n      // Tab to first user button\n      await user.tab();\n      const firstUserButton = screen.getByText('testuser1').closest('button');\n      expect(firstUserButton).toHaveFocus();\n\n      // Press Enter to select user\n      await user.keyboard('{Enter}');\n      expect(mockOnUserSelect).toHaveBeenCalledWith(mockUsers[0]);\n    });\n  });\n\n  describe('Responsive Behaviour', () => {\n    test('should handle empty users list gracefully', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => []\n      });\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n\n      // Should not show \"Existing Profiles\" section\n      expect(screen.queryByText('Existing Profiles')).not.toBeInTheDocument();\n\n      // Should still show create new profile option\n      expect(screen.getByText('Create New Profile')).toBeInTheDocument();\n    });\n\n    test('should handle username with special characters', async () => {\n      fetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => []\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            id: 1,\n            username: 'user-with_special.chars',\n            created_at: '2023-01-01T00:00:00Z'\n          })\n        });\n\n      const user = userEvent.setup();\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByText('+ Create New Profile'));\n\n      const usernameInput = screen.getByLabelText('Username');\n      await user.type(usernameInput, 'user-with_special.chars');\n\n      await user.click(screen.getByText('Create Profile'));\n\n      expect(fetch).toHaveBeenCalledWith(\n        'http://localhost:3001/api/users',\n        expect.objectContaining({\n          body: JSON.stringify({ username: 'user-with_special.chars' })\n        })\n      );\n    });\n\n    test('should trim whitespace from username input', async () => {\n      fetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => []\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            id: 1,\n            username: 'trimmeduser',\n            created_at: '2023-01-01T00:00:00Z'\n          })\n        });\n\n      const user = userEvent.setup();\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('+ Create New Profile')).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByText('+ Create New Profile'));\n\n      const usernameInput = screen.getByLabelText('Username');\n      await user.type(usernameInput, '  trimmeduser  ');\n\n      await user.click(screen.getByText('Create Profile'));\n\n      expect(fetch).toHaveBeenCalledWith(\n        'http://localhost:3001/api/users',\n        expect.objectContaining({\n          body: JSON.stringify({ username: 'trimmeduser' })\n        })\n      );\n    });\n  });\n\n  describe('Environment Configuration', () => {\n    test('should use custom API URL from environment', async () => {\n      const originalEnv = process.env.NEXT_PUBLIC_API_URL;\n      process.env.NEXT_PUBLIC_API_URL = 'https://custom-api.example.com';\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalledWith('https://custom-api.example.com/api/users');\n      });\n\n      // Restore original environment\n      process.env.NEXT_PUBLIC_API_URL = originalEnv;\n    });\n\n    test('should fall back to localhost when no environment URL is set', async () => {\n      const originalEnv = process.env.NEXT_PUBLIC_API_URL;\n      delete process.env.NEXT_PUBLIC_API_URL;\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUsers\n      });\n\n      render(<UserSelector onUserSelect={mockOnUserSelect} />);\n\n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalledWith('http://localhost:3001/api/users');\n      });\n\n      // Restore original environment\n      process.env.NEXT_PUBLIC_API_URL = originalEnv;\n    });\n  });\n});\n"],"names":["jest","mock","useRouter","route","pathname","query","asPath","push","fn","replace","global","fetch","describe","mockOnUserSelect","beforeEach","mockClear","afterEach","resetAllMocks","mockUsers","id","username","created_at","test","mockImplementation","Promise","render","UserSelector","onUserSelect","expect","screen","getByText","toBeInTheDocument","mockResolvedValueOnce","ok","json","waitFor","user","userEvent","setup","click","toHaveBeenCalledWith","currentUser","queryByText","not","getByLabelText","usernameInput","type","method","headers","body","JSON","stringify","createButton","toBeDisabled","error","queryByLabelText","mockRejectedValueOnce","Error","status","toHaveAttribute","tab","firstUserButton","closest","toHaveFocus","keyboard","objectContaining","originalEnv","process","env","NEXT_PUBLIC_API_URL"],"mappings":"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"}