ead4a8697a6145a50361a6b9711fcbeb
"use strict";
// Mock Next.js router
jest.mock("next/router", ()=>({
        useRouter: jest.fn()
    }));
// Mock components that are too complex for testing
jest.mock("../components/Layout/Layout", ()=>{
    return function MockLayout({ children }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "layout",
            children: children
        });
    };
});
jest.mock("../components/User/UserSelector", ()=>{
    return function MockUserSelector({ onUserSelect, currentUser }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "user-selector",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>onUserSelect({
                            id: 1,
                            username: "testuser"
                        }),
                    "data-testid": "select-user-btn",
                    children: "Select User"
                }),
                currentUser && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "current-user",
                    children: [
                        "Current: ",
                        currentUser.username
                    ]
                })
            ]
        });
    };
});
jest.mock("../components/UI/Loading", ()=>{
    return function MockLoading() {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "loading",
            children: "Loading..."
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _router = require("next/router");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock fetch globally
global.fetch = jest.fn();
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, "localStorage", {
    value: localStorageMock,
    writable: true
});
// Import pages after mocking dependencies
const Home = require("../pages/index").default;
describe("Pages Tests", ()=>{
    const mockPush = jest.fn();
    const mockReplace = jest.fn();
    beforeEach(()=>{
        _router.useRouter.mockReturnValue({
            route: "/",
            pathname: "/",
            query: {},
            asPath: "/",
            push: mockPush,
            replace: mockReplace
        });
        fetch.mockClear();
        localStorageMock.getItem.mockClear();
        localStorageMock.setItem.mockClear();
        localStorageMock.removeItem.mockClear();
        mockPush.mockClear();
        mockReplace.mockClear();
    });
    afterEach(()=>{
        jest.resetAllMocks();
    });
    describe("Home Page", ()=>{
        test("should render home page layout", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Home, {}));
            expect(_react1.screen.getByTestId("layout")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("user-selector")).toBeInTheDocument();
        });
        test("should load user from localStorage on mount", ()=>{
            const savedUser = {
                id: 1,
                username: "saveduser"
            };
            localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Home, {}));
            expect(localStorageMock.getItem).toHaveBeenCalledWith("currentUser");
            expect(_react1.screen.getByTestId("current-user")).toBeInTheDocument();
            expect(_react1.screen.getByText("Current: saveduser")).toBeInTheDocument();
        });
        test("should handle invalid localStorage data gracefully", ()=>{
            localStorageMock.getItem.mockReturnValue("invalid json");
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Home, {}));
            expect(localStorageMock.removeItem).toHaveBeenCalledWith("currentUser");
        });
        test("should save user to localStorage when selected", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Home, {}));
            await user.click(_react1.screen.getByTestId("select-user-btn"));
            expect(localStorageMock.setItem).toHaveBeenCalledWith("currentUser", JSON.stringify({
                id: 1,
                username: "testuser"
            }));
        });
        test("should remove user from localStorage when deselected", ()=>{
            // This would require more complex interaction
            // For now, we test the basic localStorage integration
            expect(localStorageMock.removeItem).toBeDefined();
        });
        test("should render main navigation sections", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Home, {}));
            // Check for key content sections that should be present
            // Note: This is simplified as the actual Home component is very complex
            expect(_react1.screen.getByTestId("layout")).toBeInTheDocument();
        });
    });
    describe("Search Page", ()=>{
        // Mock the Search page component
        const MockSearchPage = ()=>{
            const [searchQuery, setSearchQuery] = _react.default.useState("");
            const [searchResults, setSearchResults] = _react.default.useState([]);
            const [loading, setLoading] = _react.default.useState(false);
            const handleSearch = async (query)=>{
                setLoading(true);
                try {
                    const response = await fetch(`/api/cards/search?q=${query}`);
                    const data = await response.json();
                    setSearchResults(data.data || []);
                } catch (error) {
                    console.error("Search failed:", error);
                } finally{
                    setLoading(false);
                }
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "search-page",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                        children: "Card Search"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                        onSubmit: (e)=>{
                            e.preventDefault();
                            handleSearch(searchQuery);
                        },
                        "data-testid": "search-form",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "text",
                                value: searchQuery,
                                onChange: (e)=>setSearchQuery(e.target.value),
                                placeholder: "Search for cards...",
                                "data-testid": "search-input"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                type: "submit",
                                disabled: loading,
                                "data-testid": "search-button",
                                children: loading ? "Searching..." : "Search"
                            })
                        ]
                    }),
                    loading && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "search-loading",
                        children: "Searching..."
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "search-results",
                        children: searchResults.map((card, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                "data-testid": `card-${index}`,
                                children: card.name
                            }, index))
                    })
                ]
            });
        };
        test("should render search page correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSearchPage, {}));
            expect(_react1.screen.getByTestId("search-page")).toBeInTheDocument();
            expect(_react1.screen.getByText("Card Search")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("search-form")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("search-input")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("search-button")).toBeInTheDocument();
        });
        test("should handle search input changes", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSearchPage, {}));
            const searchInput = _react1.screen.getByTestId("search-input");
            await user.type(searchInput, "lightning bolt");
            expect(searchInput.value).toBe("lightning bolt");
        });
        test("should perform search when form is submitted", async ()=>{
            const mockSearchData = {
                data: [
                    {
                        name: "Lightning Bolt",
                        id: "1"
                    },
                    {
                        name: "Lightning Strike",
                        id: "2"
                    }
                ]
            };
            fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockSearchData
            });
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSearchPage, {}));
            const searchInput = _react1.screen.getByTestId("search-input");
            const searchButton = _react1.screen.getByTestId("search-button");
            await user.type(searchInput, "lightning");
            await user.click(searchButton);
            expect(fetch).toHaveBeenCalledWith("/api/cards/search?q=lightning");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("card-0")).toBeInTheDocument();
                expect(_react1.screen.getByText("Lightning Bolt")).toBeInTheDocument();
                expect(_react1.screen.getByText("Lightning Strike")).toBeInTheDocument();
            });
        });
        test("should show loading state during search", async ()=>{
            fetch.mockImplementation(()=>new Promise(()=>{})); // Never resolves
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSearchPage, {}));
            const searchInput = _react1.screen.getByTestId("search-input");
            const searchButton = _react1.screen.getByTestId("search-button");
            await user.type(searchInput, "test");
            await user.click(searchButton);
            expect(_react1.screen.getByTestId("search-loading")).toBeInTheDocument();
            expect(_react1.screen.getAllByText("Searching...")).toHaveLength(2);
            expect(searchButton).toBeDisabled();
        });
    });
    describe("Favourites Page", ()=>{
        const MockFavouritesPage = ()=>{
            const [favourites, setFavourites] = _react.default.useState([]);
            const [loading, setLoading] = _react.default.useState(true);
            const [currentUser] = _react.default.useState({
                id: 1,
                username: "testuser"
            });
            _react.default.useEffect(()=>{
                const loadFavourites = async ()=>{
                    if (!currentUser) return;
                    try {
                        const response = await fetch(`/api/favourites/${currentUser.id}`);
                        const data = await response.json();
                        setFavourites(data);
                    } catch (error) {
                        console.error("Failed to load favourites:", error);
                    } finally{
                        setLoading(false);
                    }
                };
                loadFavourites();
            }, [
                currentUser
            ]);
            const removeFavourite = async (favouriteId)=>{
                try {
                    await fetch(`/api/favourites/${favouriteId}`, {
                        method: "DELETE"
                    });
                    setFavourites(favourites.filter((fav)=>fav.id !== favouriteId));
                } catch (error) {
                    console.error("Failed to remove favourite:", error);
                }
            };
            if (loading) {
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "favourites-loading",
                    children: "Loading favourites..."
                });
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "favourites-page",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                        children: "My Favourite Cards"
                    }),
                    !currentUser && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "no-user",
                        children: "Please select a user first"
                    }),
                    currentUser && favourites.length === 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "no-favourites",
                        children: "No favourite cards yet"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "favourites-list",
                        children: favourites.map((favourite)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                "data-testid": `favourite-${favourite.id}`,
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                        children: favourite.card_name
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        children: favourite.notes
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        onClick: ()=>removeFavourite(favourite.id),
                                        "data-testid": `remove-${favourite.id}`,
                                        children: "Remove"
                                    })
                                ]
                            }, favourite.id))
                    })
                ]
            });
        };
        test("should render favourites page correctly", ()=>{
            fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>[]
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockFavouritesPage, {}));
            expect(_react1.screen.getByTestId("favourites-loading")).toBeInTheDocument();
        });
        test("should load user favourites on mount", async ()=>{
            const mockFavourites = [
                {
                    id: 1,
                    card_name: "Lightning Bolt",
                    notes: "Great damage spell",
                    user_id: 1
                },
                {
                    id: 2,
                    card_name: "Counterspell",
                    notes: "Essential counter magic",
                    user_id: 1
                }
            ];
            fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockFavourites
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockFavouritesPage, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Lightning Bolt")).toBeInTheDocument();
                expect(_react1.screen.getByText("Counterspell")).toBeInTheDocument();
                expect(_react1.screen.getByText("Great damage spell")).toBeInTheDocument();
                expect(_react1.screen.getByText("Essential counter magic")).toBeInTheDocument();
            });
            expect(fetch).toHaveBeenCalledWith("/api/favourites/1");
        });
        test("should show empty state when no favourites", async ()=>{
            fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>[]
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockFavouritesPage, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("no-favourites")).toBeInTheDocument();
            });
        });
        test("should handle removing favourites", async ()=>{
            const mockFavourites = [
                {
                    id: 1,
                    card_name: "Lightning Bolt",
                    notes: "Great damage spell",
                    user_id: 1
                }
            ];
            fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockFavourites
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        message: "Favourite removed"
                    })
            });
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockFavouritesPage, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Lightning Bolt")).toBeInTheDocument();
            });
            await user.click(_react1.screen.getByTestId("remove-1"));
            expect(fetch).toHaveBeenCalledWith("/api/favourites/1", {
                method: "DELETE"
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByText("Lightning Bolt")).not.toBeInTheDocument();
            });
        });
    });
    describe("Profile Page", ()=>{
        const MockProfilePage = ()=>{
            const [user, setUser] = _react.default.useState(null);
            const [editing, setEditing] = _react.default.useState(false);
            const [newUsername, setNewUsername] = _react.default.useState("");
            _react.default.useEffect(()=>{
                const savedUser = localStorage.getItem("currentUser");
                if (savedUser) {
                    setUser(JSON.parse(savedUser));
                }
            }, []);
            const updateProfile = async ()=>{
                if (!user || !newUsername.trim()) return;
                try {
                    const response = await fetch(`/api/users/${user.id}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            username: newUsername.trim()
                        })
                    });
                    if (response.ok) {
                        const updatedUser = await response.json();
                        setUser(updatedUser);
                        localStorage.setItem("currentUser", JSON.stringify(updatedUser));
                        setEditing(false);
                        setNewUsername("");
                    }
                } catch (error) {
                    console.error("Failed to update profile:", error);
                }
            };
            const deleteProfile = async ()=>{
                if (!user) return;
                try {
                    await fetch(`/api/users/${user.id}`, {
                        method: "DELETE"
                    });
                    setUser(null);
                    localStorage.removeItem("currentUser");
                } catch (error) {
                    console.error("Failed to delete profile:", error);
                }
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "profile-page",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                        children: "User Profile"
                    }),
                    !user && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "no-user",
                        children: "Please select a user first"
                    }),
                    user && !editing && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "profile-display",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                                children: user.username
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                children: [
                                    "Member since: ",
                                    new Date(user.created_at).toLocaleDateString()
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>{
                                    setEditing(true);
                                    setNewUsername(user.username);
                                },
                                "data-testid": "edit-profile-btn",
                                children: "Edit Profile"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: deleteProfile,
                                "data-testid": "delete-profile-btn",
                                style: {
                                    marginLeft: "1rem",
                                    background: "red"
                                },
                                children: "Delete Profile"
                            })
                        ]
                    }),
                    user && editing && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "profile-edit",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "text",
                                value: newUsername,
                                onChange: (e)=>setNewUsername(e.target.value),
                                "data-testid": "username-input"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: updateProfile,
                                disabled: !newUsername.trim(),
                                "data-testid": "save-btn",
                                children: "Save"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>{
                                    setEditing(false);
                                    setNewUsername("");
                                },
                                "data-testid": "cancel-btn",
                                children: "Cancel"
                            })
                        ]
                    })
                ]
            });
        };
        test("should render profile page correctly", ()=>{
            localStorageMock.getItem.mockReturnValue(null);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockProfilePage, {}));
            expect(_react1.screen.getByTestId("profile-page")).toBeInTheDocument();
            expect(_react1.screen.getByText("User Profile")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("no-user")).toBeInTheDocument();
        });
        test("should load user from localStorage", ()=>{
            const savedUser = {
                id: 1,
                username: "testuser",
                created_at: "2023-01-01T00:00:00Z"
            };
            localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockProfilePage, {}));
            expect(_react1.screen.getByTestId("profile-display")).toBeInTheDocument();
            expect(_react1.screen.getByText("testuser")).toBeInTheDocument();
            expect(_react1.screen.getByText("Member since: 1/1/2023")).toBeInTheDocument();
        });
        test("should enter edit mode when edit button is clicked", async ()=>{
            const savedUser = {
                id: 1,
                username: "testuser",
                created_at: "2023-01-01T00:00:00Z"
            };
            localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockProfilePage, {}));
            await user.click(_react1.screen.getByTestId("edit-profile-btn"));
            expect(_react1.screen.getByTestId("profile-edit")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("username-input")).toHaveValue("testuser");
        });
        test("should update profile when save is clicked", async ()=>{
            const savedUser = {
                id: 1,
                username: "testuser",
                created_at: "2023-01-01T00:00:00Z"
            };
            localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));
            const updatedUser = {
                ...savedUser,
                username: "updateduser"
            };
            fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>updatedUser
            });
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockProfilePage, {}));
            await user.click(_react1.screen.getByTestId("edit-profile-btn"));
            const usernameInput = _react1.screen.getByTestId("username-input");
            await user.clear(usernameInput);
            await user.type(usernameInput, "updateduser");
            await user.click(_react1.screen.getByTestId("save-btn"));
            expect(fetch).toHaveBeenCalledWith("/api/users/1", {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    username: "updateduser"
                })
            });
            await (0, _react1.waitFor)(()=>{
                expect(localStorageMock.setItem).toHaveBeenCalledWith("currentUser", JSON.stringify(updatedUser));
            });
        });
        test("should delete profile when delete button is clicked", async ()=>{
            const savedUser = {
                id: 1,
                username: "testuser",
                created_at: "2023-01-01T00:00:00Z"
            };
            localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));
            fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        message: "User deleted"
                    })
            });
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockProfilePage, {}));
            await user.click(_react1.screen.getByTestId("delete-profile-btn"));
            expect(fetch).toHaveBeenCalledWith("/api/users/1", {
                method: "DELETE"
            });
            await (0, _react1.waitFor)(()=>{
                expect(localStorageMock.removeItem).toHaveBeenCalledWith("currentUser");
            });
        });
        test("should cancel editing when cancel button is clicked", async ()=>{
            const savedUser = {
                id: 1,
                username: "testuser",
                created_at: "2023-01-01T00:00:00Z"
            };
            localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockProfilePage, {}));
            await user.click(_react1.screen.getByTestId("edit-profile-btn"));
            await user.click(_react1.screen.getByTestId("cancel-btn"));
            expect(_react1.screen.getByTestId("profile-display")).toBeInTheDocument();
            expect(_react1.screen.queryByTestId("profile-edit")).not.toBeInTheDocument();
        });
    });
    describe("API Test Page", ()=>{
        const MockApiTestPage = ()=>{
            const [apiStatus, setApiStatus] = _react.default.useState("unknown");
            const [testResults, setTestResults] = _react.default.useState([]);
            const testApiEndpoint = async (endpoint, method = "GET")=>{
                try {
                    const response = await fetch(endpoint, {
                        method
                    });
                    const result = {
                        endpoint,
                        method,
                        status: response.status,
                        ok: response.ok,
                        timestamp: new Date().toISOString()
                    };
                    setTestResults((prev)=>[
                            result,
                            ...prev
                        ]);
                    return result;
                } catch (error) {
                    const result = {
                        endpoint,
                        method,
                        status: "Error",
                        ok: false,
                        error: error.message,
                        timestamp: new Date().toISOString()
                    };
                    setTestResults((prev)=>[
                            result,
                            ...prev
                        ]);
                    return result;
                }
            };
            const runHealthCheck = async ()=>{
                setApiStatus("testing");
                const result = await testApiEndpoint("/health");
                setApiStatus(result.ok ? "healthy" : "unhealthy");
            };
            const runFullApiTest = async ()=>{
                const endpoints = [
                    {
                        path: "/health",
                        method: "GET"
                    },
                    {
                        path: "/api/users",
                        method: "GET"
                    },
                    {
                        path: "/api/messages",
                        method: "GET"
                    },
                    {
                        path: "/api/cards/random",
                        method: "GET"
                    }
                ];
                for (const endpoint of endpoints){
                    await testApiEndpoint(endpoint.path, endpoint.method);
                }
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "api-test-page",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                        children: "API Testing Dashboard"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "api-status",
                        children: [
                            "Status: ",
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                "data-testid": "status-value",
                                children: apiStatus
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: runHealthCheck,
                                "data-testid": "health-check-btn",
                                children: "Run Health Check"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: runFullApiTest,
                                "data-testid": "full-test-btn",
                                children: "Run Full API Test"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "test-results",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                                children: "Test Results"
                            }),
                            testResults.map((result, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    "data-testid": `result-${index}`,
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                            children: [
                                                result.method,
                                                " ",
                                                result.endpoint
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                            "data-testid": `status-${index}`,
                                            children: result.status
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                            children: result.ok ? "✅" : "❌"
                                        })
                                    ]
                                }, index))
                        ]
                    })
                ]
            });
        };
        test("should render API test page correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApiTestPage, {}));
            expect(_react1.screen.getByTestId("api-test-page")).toBeInTheDocument();
            expect(_react1.screen.getByText("API Testing Dashboard")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("health-check-btn")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("full-test-btn")).toBeInTheDocument();
        });
        test("should run health check when button is clicked", async ()=>{
            fetch.mockResolvedValueOnce({
                ok: true,
                status: 200,
                json: async ()=>({
                        status: "OK"
                    })
            });
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApiTestPage, {}));
            await user.click(_react1.screen.getByTestId("health-check-btn"));
            expect(fetch).toHaveBeenCalledWith("/health", {
                method: "GET"
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("status-value")).toHaveTextContent("healthy");
            });
        });
        test("should run full API test when button is clicked", async ()=>{
            // Mock responses for all endpoints
            fetch.mockResolvedValueOnce({
                ok: true,
                status: 200
            }).mockResolvedValueOnce({
                ok: true,
                status: 200
            }).mockResolvedValueOnce({
                ok: true,
                status: 200
            }).mockResolvedValueOnce({
                ok: true,
                status: 200
            });
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApiTestPage, {}));
            await user.click(_react1.screen.getByTestId("full-test-btn"));
            await (0, _react1.waitFor)(()=>{
                expect(fetch).toHaveBeenCalledTimes(4);
                expect(_react1.screen.getByTestId("result-0")).toBeInTheDocument();
            });
            expect(fetch).toHaveBeenCalledWith("/health", {
                method: "GET"
            });
            expect(fetch).toHaveBeenCalledWith("/api/users", {
                method: "GET"
            });
            expect(fetch).toHaveBeenCalledWith("/api/messages", {
                method: "GET"
            });
            expect(fetch).toHaveBeenCalledWith("/api/cards/random", {
                method: "GET"
            });
        });
        test("should handle API errors gracefully", async ()=>{
            fetch.mockRejectedValueOnce(new Error("Network error"));
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApiTestPage, {}));
            await user.click(_react1.screen.getByTestId("health-check-btn"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("status-value")).toHaveTextContent("unhealthy");
                expect(_react1.screen.getByText("❌")).toBeInTheDocument();
            });
        });
    });
    describe("Navigation and Routing", ()=>{
        test("should handle navigation between pages", ()=>{
            // Test that router mock is working correctly
            expect(mockPush).toBeDefined();
            expect(mockReplace).toBeDefined();
        });
        test("should handle dynamic routes correctly", ()=>{
            _router.useRouter.mockReturnValue({
                route: "/users/[id]",
                pathname: "/users/[id]",
                query: {
                    id: "123"
                },
                asPath: "/users/123",
                push: mockPush,
                replace: mockReplace
            });
            // This would test dynamic routing if we had such pages
            const mockRouter = (0, _router.useRouter)();
            expect(mockRouter.query.id).toBe("123");
        });
        test("should handle query parameters correctly", ()=>{
            _router.useRouter.mockReturnValue({
                route: "/search",
                pathname: "/search",
                query: {
                    q: "lightning bolt",
                    type: "instant"
                },
                asPath: "/search?q=lightning%20bolt&type=instant",
                push: mockPush,
                replace: mockReplace
            });
            const mockRouter = (0, _router.useRouter)();
            expect(mockRouter.query.q).toBe("lightning bolt");
            expect(mockRouter.query.type).toBe("instant");
        });
    });
    describe("Error Handling", ()=>{
        test("should handle 404 errors appropriately", ()=>{
            _router.useRouter.mockReturnValue({
                route: "/404",
                pathname: "/404",
                query: {},
                asPath: "/404",
                push: mockPush,
                replace: mockReplace
            });
            // This would test 404 handling if we had a 404 page
            const mockRouter = (0, _router.useRouter)();
            expect(mockRouter.route).toBe("/404");
        });
        test("should handle server errors gracefully", async ()=>{
            fetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                json: async ()=>({
                        error: "Internal server error"
                    })
            });
            // This would test error handling in components
            expect(fetch).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,