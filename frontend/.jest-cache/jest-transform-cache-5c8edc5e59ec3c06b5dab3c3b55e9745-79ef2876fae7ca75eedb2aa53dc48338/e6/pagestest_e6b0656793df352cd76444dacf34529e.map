{"version":3,"sources":["/Users/samuellove/Documents/GitHub/Capstone/frontend/tests/pages.test.js"],"sourcesContent":["import React from \"react\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport \"@testing-library/jest-dom\";\nimport { useRouter } from \"next/router\";\n\n// Mock Next.js router\njest.mock(\"next/router\", () => ({\n  useRouter: jest.fn(),\n}));\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\n\nObject.defineProperty(window, \"localStorage\", {\n  value: localStorageMock,\n  writable: true,\n});\n\n// Mock components that are too complex for testing\njest.mock(\"../components/Layout/Layout\", () => {\n  return function MockLayout({ children }) {\n    return <div data-testid=\"layout\">{children}</div>;\n  };\n});\n\njest.mock(\"../components/User/UserSelector\", () => {\n  return function MockUserSelector({ onUserSelect, currentUser }) {\n    return (\n      <div data-testid=\"user-selector\">\n        <button\n          onClick={() => onUserSelect({ id: 1, username: \"testuser\" })}\n          data-testid=\"select-user-btn\"\n        >\n          Select User\n        </button>\n        {currentUser && (\n          <div data-testid=\"current-user\">Current: {currentUser.username}</div>\n        )}\n      </div>\n    );\n  };\n});\n\njest.mock(\"../components/UI/Loading\", () => {\n  return function MockLoading() {\n    return <div data-testid=\"loading\">Loading...</div>;\n  };\n});\n\n// Import pages after mocking dependencies\nconst Home = require(\"../pages/index\").default;\n\ndescribe(\"Pages Tests\", () => {\n  const mockPush = jest.fn();\n  const mockReplace = jest.fn();\n\n  beforeEach(() => {\n    useRouter.mockReturnValue({\n      route: \"/\",\n      pathname: \"/\",\n      query: {},\n      asPath: \"/\",\n      push: mockPush,\n      replace: mockReplace,\n    });\n\n    fetch.mockClear();\n    localStorageMock.getItem.mockClear();\n    localStorageMock.setItem.mockClear();\n    localStorageMock.removeItem.mockClear();\n    mockPush.mockClear();\n    mockReplace.mockClear();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe(\"Home Page\", () => {\n    test(\"should render home page layout\", () => {\n      render(<Home />);\n\n      expect(screen.getByTestId(\"layout\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"user-selector\")).toBeInTheDocument();\n    });\n\n    test(\"should load user from localStorage on mount\", () => {\n      const savedUser = { id: 1, username: \"saveduser\" };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      render(<Home />);\n\n      expect(localStorageMock.getItem).toHaveBeenCalledWith(\"currentUser\");\n      expect(screen.getByTestId(\"current-user\")).toBeInTheDocument();\n      expect(screen.getByText(\"Current: saveduser\")).toBeInTheDocument();\n    });\n\n    test(\"should handle invalid localStorage data gracefully\", () => {\n      localStorageMock.getItem.mockReturnValue(\"invalid json\");\n\n      render(<Home />);\n\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith(\"currentUser\");\n    });\n\n    test(\"should save user to localStorage when selected\", async () => {\n      const user = userEvent.setup();\n      render(<Home />);\n\n      await user.click(screen.getByTestId(\"select-user-btn\"));\n\n      expect(localStorageMock.setItem).toHaveBeenCalledWith(\n        \"currentUser\",\n        JSON.stringify({ id: 1, username: \"testuser\" }),\n      );\n    });\n\n    test(\"should remove user from localStorage when deselected\", () => {\n      // This would require more complex interaction\n      // For now, we test the basic localStorage integration\n      expect(localStorageMock.removeItem).toBeDefined();\n    });\n\n    test(\"should render main navigation sections\", () => {\n      render(<Home />);\n\n      // Check for key content sections that should be present\n      // Note: This is simplified as the actual Home component is very complex\n      expect(screen.getByTestId(\"layout\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Search Page\", () => {\n    // Mock the Search page component\n    const MockSearchPage = () => {\n      const [searchQuery, setSearchQuery] = React.useState(\"\");\n      const [searchResults, setSearchResults] = React.useState([]);\n      const [loading, setLoading] = React.useState(false);\n\n      const handleSearch = async (query) => {\n        setLoading(true);\n        try {\n          const response = await fetch(`/api/cards/search?q=${query}`);\n          const data = await response.json();\n          setSearchResults(data.data || []);\n        } catch (error) {\n          console.error(\"Search failed:\", error);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      return (\n        <div data-testid=\"search-page\">\n          <h1>Card Search</h1>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              handleSearch(searchQuery);\n            }}\n            data-testid=\"search-form\"\n          >\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search for cards...\"\n              data-testid=\"search-input\"\n            />\n            <button\n              type=\"submit\"\n              disabled={loading}\n              data-testid=\"search-button\"\n            >\n              {loading ? \"Searching...\" : \"Search\"}\n            </button>\n          </form>\n          {loading && <div data-testid=\"search-loading\">Searching...</div>}\n          <div data-testid=\"search-results\">\n            {searchResults.map((card, index) => (\n              <div key={index} data-testid={`card-${index}`}>\n                {card.name}\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    };\n\n    test(\"should render search page correctly\", () => {\n      render(<MockSearchPage />);\n\n      expect(screen.getByTestId(\"search-page\")).toBeInTheDocument();\n      expect(screen.getByText(\"Card Search\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"search-form\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"search-input\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"search-button\")).toBeInTheDocument();\n    });\n\n    test(\"should handle search input changes\", async () => {\n      const user = userEvent.setup();\n      render(<MockSearchPage />);\n\n      const searchInput = screen.getByTestId(\"search-input\");\n      await user.type(searchInput, \"lightning bolt\");\n\n      expect(searchInput.value).toBe(\"lightning bolt\");\n    });\n\n    test(\"should perform search when form is submitted\", async () => {\n      const mockSearchData = {\n        data: [\n          { name: \"Lightning Bolt\", id: \"1\" },\n          { name: \"Lightning Strike\", id: \"2\" },\n        ],\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockSearchData,\n      });\n\n      const user = userEvent.setup();\n      render(<MockSearchPage />);\n\n      const searchInput = screen.getByTestId(\"search-input\");\n      const searchButton = screen.getByTestId(\"search-button\");\n\n      await user.type(searchInput, \"lightning\");\n      await user.click(searchButton);\n\n      expect(fetch).toHaveBeenCalledWith(\"/api/cards/search?q=lightning\");\n\n      await waitFor(() => {\n        expect(screen.getByTestId(\"card-0\")).toBeInTheDocument();\n        expect(screen.getByText(\"Lightning Bolt\")).toBeInTheDocument();\n        expect(screen.getByText(\"Lightning Strike\")).toBeInTheDocument();\n      });\n    });\n\n    test(\"should show loading state during search\", async () => {\n      fetch.mockImplementation(() => new Promise(() => {})); // Never resolves\n\n      const user = userEvent.setup();\n      render(<MockSearchPage />);\n\n      const searchInput = screen.getByTestId(\"search-input\");\n      const searchButton = screen.getByTestId(\"search-button\");\n\n      await user.type(searchInput, \"test\");\n      await user.click(searchButton);\n\n      expect(screen.getByTestId(\"search-loading\")).toBeInTheDocument();\n      expect(screen.getAllByText(\"Searching...\")).toHaveLength(2);\n      expect(searchButton).toBeDisabled();\n    });\n  });\n\n  describe(\"Favourites Page\", () => {\n    const MockFavouritesPage = () => {\n      const [favourites, setFavourites] = React.useState([]);\n      const [loading, setLoading] = React.useState(true);\n      const [currentUser] = React.useState({ id: 1, username: \"testuser\" });\n\n      React.useEffect(() => {\n        const loadFavourites = async () => {\n          if (!currentUser) return;\n\n          try {\n            const response = await fetch(`/api/favourites/${currentUser.id}`);\n            const data = await response.json();\n            setFavourites(data);\n          } catch (error) {\n            console.error(\"Failed to load favourites:\", error);\n          } finally {\n            setLoading(false);\n          }\n        };\n\n        loadFavourites();\n      }, [currentUser]);\n\n      const removeFavourite = async (favouriteId) => {\n        try {\n          await fetch(`/api/favourites/${favouriteId}`, { method: \"DELETE\" });\n          setFavourites(favourites.filter((fav) => fav.id !== favouriteId));\n        } catch (error) {\n          console.error(\"Failed to remove favourite:\", error);\n        }\n      };\n\n      if (loading) {\n        return (\n          <div data-testid=\"favourites-loading\">Loading favourites...</div>\n        );\n      }\n\n      return (\n        <div data-testid=\"favourites-page\">\n          <h1>My Favourite Cards</h1>\n          {!currentUser && (\n            <div data-testid=\"no-user\">Please select a user first</div>\n          )}\n          {currentUser && favourites.length === 0 && (\n            <div data-testid=\"no-favourites\">No favourite cards yet</div>\n          )}\n          <div data-testid=\"favourites-list\">\n            {favourites.map((favourite) => (\n              <div key={favourite.id} data-testid={`favourite-${favourite.id}`}>\n                <h3>{favourite.card_name}</h3>\n                <p>{favourite.notes}</p>\n                <button\n                  onClick={() => removeFavourite(favourite.id)}\n                  data-testid={`remove-${favourite.id}`}\n                >\n                  Remove\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    };\n\n    test(\"should render favourites page correctly\", () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => [],\n      });\n\n      render(<MockFavouritesPage />);\n\n      expect(screen.getByTestId(\"favourites-loading\")).toBeInTheDocument();\n    });\n\n    test(\"should load user favourites on mount\", async () => {\n      const mockFavourites = [\n        {\n          id: 1,\n          card_name: \"Lightning Bolt\",\n          notes: \"Great damage spell\",\n          user_id: 1,\n        },\n        {\n          id: 2,\n          card_name: \"Counterspell\",\n          notes: \"Essential counter magic\",\n          user_id: 1,\n        },\n      ];\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockFavourites,\n      });\n\n      render(<MockFavouritesPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText(\"Lightning Bolt\")).toBeInTheDocument();\n        expect(screen.getByText(\"Counterspell\")).toBeInTheDocument();\n        expect(screen.getByText(\"Great damage spell\")).toBeInTheDocument();\n        expect(screen.getByText(\"Essential counter magic\")).toBeInTheDocument();\n      });\n\n      expect(fetch).toHaveBeenCalledWith(\"/api/favourites/1\");\n    });\n\n    test(\"should show empty state when no favourites\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => [],\n      });\n\n      render(<MockFavouritesPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId(\"no-favourites\")).toBeInTheDocument();\n      });\n    });\n\n    test(\"should handle removing favourites\", async () => {\n      const mockFavourites = [\n        {\n          id: 1,\n          card_name: \"Lightning Bolt\",\n          notes: \"Great damage spell\",\n          user_id: 1,\n        },\n      ];\n\n      fetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockFavourites,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ message: \"Favourite removed\" }),\n        });\n\n      const user = userEvent.setup();\n      render(<MockFavouritesPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText(\"Lightning Bolt\")).toBeInTheDocument();\n      });\n\n      await user.click(screen.getByTestId(\"remove-1\"));\n\n      expect(fetch).toHaveBeenCalledWith(\"/api/favourites/1\", {\n        method: \"DELETE\",\n      });\n\n      await waitFor(() => {\n        expect(screen.queryByText(\"Lightning Bolt\")).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe(\"Profile Page\", () => {\n    const MockProfilePage = () => {\n      const [user, setUser] = React.useState(null);\n      const [editing, setEditing] = React.useState(false);\n      const [newUsername, setNewUsername] = React.useState(\"\");\n\n      React.useEffect(() => {\n        const savedUser = localStorage.getItem(\"currentUser\");\n        if (savedUser) {\n          setUser(JSON.parse(savedUser));\n        }\n      }, []);\n\n      const updateProfile = async () => {\n        if (!user || !newUsername.trim()) return;\n\n        try {\n          const response = await fetch(`/api/users/${user.id}`, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ username: newUsername.trim() }),\n          });\n\n          if (response.ok) {\n            const updatedUser = await response.json();\n            setUser(updatedUser);\n            localStorage.setItem(\"currentUser\", JSON.stringify(updatedUser));\n            setEditing(false);\n            setNewUsername(\"\");\n          }\n        } catch (error) {\n          console.error(\"Failed to update profile:\", error);\n        }\n      };\n\n      const deleteProfile = async () => {\n        if (!user) return;\n\n        try {\n          await fetch(`/api/users/${user.id}`, { method: \"DELETE\" });\n          setUser(null);\n          localStorage.removeItem(\"currentUser\");\n        } catch (error) {\n          console.error(\"Failed to delete profile:\", error);\n        }\n      };\n\n      return (\n        <div data-testid=\"profile-page\">\n          <h1>User Profile</h1>\n          {!user && <div data-testid=\"no-user\">Please select a user first</div>}\n          {user && !editing && (\n            <div data-testid=\"profile-display\">\n              <h2>{user.username}</h2>\n              <p>\n                Member since: {new Date(user.created_at).toLocaleDateString()}\n              </p>\n              <button\n                onClick={() => {\n                  setEditing(true);\n                  setNewUsername(user.username);\n                }}\n                data-testid=\"edit-profile-btn\"\n              >\n                Edit Profile\n              </button>\n              <button\n                onClick={deleteProfile}\n                data-testid=\"delete-profile-btn\"\n                style={{ marginLeft: \"1rem\", background: \"red\" }}\n              >\n                Delete Profile\n              </button>\n            </div>\n          )}\n          {user && editing && (\n            <div data-testid=\"profile-edit\">\n              <input\n                type=\"text\"\n                value={newUsername}\n                onChange={(e) => setNewUsername(e.target.value)}\n                data-testid=\"username-input\"\n              />\n              <button\n                onClick={updateProfile}\n                disabled={!newUsername.trim()}\n                data-testid=\"save-btn\"\n              >\n                Save\n              </button>\n              <button\n                onClick={() => {\n                  setEditing(false);\n                  setNewUsername(\"\");\n                }}\n                data-testid=\"cancel-btn\"\n              >\n                Cancel\n              </button>\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    test(\"should render profile page correctly\", () => {\n      localStorageMock.getItem.mockReturnValue(null);\n      render(<MockProfilePage />);\n\n      expect(screen.getByTestId(\"profile-page\")).toBeInTheDocument();\n      expect(screen.getByText(\"User Profile\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"no-user\")).toBeInTheDocument();\n    });\n\n    test(\"should load user from localStorage\", () => {\n      const savedUser = {\n        id: 1,\n        username: \"testuser\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      render(<MockProfilePage />);\n\n      expect(screen.getByTestId(\"profile-display\")).toBeInTheDocument();\n      expect(screen.getByText(\"testuser\")).toBeInTheDocument();\n      expect(screen.getByText(\"Member since: 1/1/2023\")).toBeInTheDocument();\n    });\n\n    test(\"should enter edit mode when edit button is clicked\", async () => {\n      const savedUser = {\n        id: 1,\n        username: \"testuser\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      const user = userEvent.setup();\n      render(<MockProfilePage />);\n\n      await user.click(screen.getByTestId(\"edit-profile-btn\"));\n\n      expect(screen.getByTestId(\"profile-edit\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"username-input\")).toHaveValue(\"testuser\");\n    });\n\n    test(\"should update profile when save is clicked\", async () => {\n      const savedUser = {\n        id: 1,\n        username: \"testuser\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      const updatedUser = {\n        ...savedUser,\n        username: \"updateduser\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => updatedUser,\n      });\n\n      const user = userEvent.setup();\n      render(<MockProfilePage />);\n\n      await user.click(screen.getByTestId(\"edit-profile-btn\"));\n\n      const usernameInput = screen.getByTestId(\"username-input\");\n      await user.clear(usernameInput);\n      await user.type(usernameInput, \"updateduser\");\n\n      await user.click(screen.getByTestId(\"save-btn\"));\n\n      expect(fetch).toHaveBeenCalledWith(\"/api/users/1\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ username: \"updateduser\" }),\n      });\n\n      await waitFor(() => {\n        expect(localStorageMock.setItem).toHaveBeenCalledWith(\n          \"currentUser\",\n          JSON.stringify(updatedUser),\n        );\n      });\n    });\n\n    test(\"should delete profile when delete button is clicked\", async () => {\n      const savedUser = {\n        id: 1,\n        username: \"testuser\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ message: \"User deleted\" }),\n      });\n\n      const user = userEvent.setup();\n      render(<MockProfilePage />);\n\n      await user.click(screen.getByTestId(\"delete-profile-btn\"));\n\n      expect(fetch).toHaveBeenCalledWith(\"/api/users/1\", {\n        method: \"DELETE\",\n      });\n\n      await waitFor(() => {\n        expect(localStorageMock.removeItem).toHaveBeenCalledWith(\"currentUser\");\n      });\n    });\n\n    test(\"should cancel editing when cancel button is clicked\", async () => {\n      const savedUser = {\n        id: 1,\n        username: \"testuser\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(savedUser));\n\n      const user = userEvent.setup();\n      render(<MockProfilePage />);\n\n      await user.click(screen.getByTestId(\"edit-profile-btn\"));\n      await user.click(screen.getByTestId(\"cancel-btn\"));\n\n      expect(screen.getByTestId(\"profile-display\")).toBeInTheDocument();\n      expect(screen.queryByTestId(\"profile-edit\")).not.toBeInTheDocument();\n    });\n  });\n\n  describe(\"API Test Page\", () => {\n    const MockApiTestPage = () => {\n      const [apiStatus, setApiStatus] = React.useState(\"unknown\");\n      const [testResults, setTestResults] = React.useState([]);\n\n      const testApiEndpoint = async (endpoint, method = \"GET\") => {\n        try {\n          const response = await fetch(endpoint, { method });\n          const result = {\n            endpoint,\n            method,\n            status: response.status,\n            ok: response.ok,\n            timestamp: new Date().toISOString(),\n          };\n          setTestResults((prev) => [result, ...prev]);\n          return result;\n        } catch (error) {\n          const result = {\n            endpoint,\n            method,\n            status: \"Error\",\n            ok: false,\n            error: error.message,\n            timestamp: new Date().toISOString(),\n          };\n          setTestResults((prev) => [result, ...prev]);\n          return result;\n        }\n      };\n\n      const runHealthCheck = async () => {\n        setApiStatus(\"testing\");\n        const result = await testApiEndpoint(\"/health\");\n        setApiStatus(result.ok ? \"healthy\" : \"unhealthy\");\n      };\n\n      const runFullApiTest = async () => {\n        const endpoints = [\n          { path: \"/health\", method: \"GET\" },\n          { path: \"/api/users\", method: \"GET\" },\n          { path: \"/api/messages\", method: \"GET\" },\n          { path: \"/api/cards/random\", method: \"GET\" },\n        ];\n\n        for (const endpoint of endpoints) {\n          await testApiEndpoint(endpoint.path, endpoint.method);\n        }\n      };\n\n      return (\n        <div data-testid=\"api-test-page\">\n          <h1>API Testing Dashboard</h1>\n          <div data-testid=\"api-status\">\n            Status: <span data-testid=\"status-value\">{apiStatus}</span>\n          </div>\n          <div>\n            <button onClick={runHealthCheck} data-testid=\"health-check-btn\">\n              Run Health Check\n            </button>\n            <button onClick={runFullApiTest} data-testid=\"full-test-btn\">\n              Run Full API Test\n            </button>\n          </div>\n          <div data-testid=\"test-results\">\n            <h2>Test Results</h2>\n            {testResults.map((result, index) => (\n              <div key={index} data-testid={`result-${index}`}>\n                <span>\n                  {result.method} {result.endpoint}\n                </span>\n                <span data-testid={`status-${index}`}>{result.status}</span>\n                <span>{result.ok ? \"✅\" : \"❌\"}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    };\n\n    test(\"should render API test page correctly\", () => {\n      render(<MockApiTestPage />);\n\n      expect(screen.getByTestId(\"api-test-page\")).toBeInTheDocument();\n      expect(screen.getByText(\"API Testing Dashboard\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"health-check-btn\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"full-test-btn\")).toBeInTheDocument();\n    });\n\n    test(\"should run health check when button is clicked\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ status: \"OK\" }),\n      });\n\n      const user = userEvent.setup();\n      render(<MockApiTestPage />);\n\n      await user.click(screen.getByTestId(\"health-check-btn\"));\n\n      expect(fetch).toHaveBeenCalledWith(\"/health\", { method: \"GET\" });\n\n      await waitFor(() => {\n        expect(screen.getByTestId(\"status-value\")).toHaveTextContent(\"healthy\");\n      });\n    });\n\n    test(\"should run full API test when button is clicked\", async () => {\n      // Mock responses for all endpoints\n      fetch\n        .mockResolvedValueOnce({ ok: true, status: 200 })\n        .mockResolvedValueOnce({ ok: true, status: 200 })\n        .mockResolvedValueOnce({ ok: true, status: 200 })\n        .mockResolvedValueOnce({ ok: true, status: 200 });\n\n      const user = userEvent.setup();\n      render(<MockApiTestPage />);\n\n      await user.click(screen.getByTestId(\"full-test-btn\"));\n\n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalledTimes(4);\n        expect(screen.getByTestId(\"result-0\")).toBeInTheDocument();\n      });\n\n      expect(fetch).toHaveBeenCalledWith(\"/health\", { method: \"GET\" });\n      expect(fetch).toHaveBeenCalledWith(\"/api/users\", { method: \"GET\" });\n      expect(fetch).toHaveBeenCalledWith(\"/api/messages\", { method: \"GET\" });\n      expect(fetch).toHaveBeenCalledWith(\"/api/cards/random\", {\n        method: \"GET\",\n      });\n    });\n\n    test(\"should handle API errors gracefully\", async () => {\n      fetch.mockRejectedValueOnce(new Error(\"Network error\"));\n\n      const user = userEvent.setup();\n      render(<MockApiTestPage />);\n\n      await user.click(screen.getByTestId(\"health-check-btn\"));\n\n      await waitFor(() => {\n        expect(screen.getByTestId(\"status-value\")).toHaveTextContent(\n          \"unhealthy\",\n        );\n        expect(screen.getByText(\"❌\")).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe(\"Navigation and Routing\", () => {\n    test(\"should handle navigation between pages\", () => {\n      // Test that router mock is working correctly\n      expect(mockPush).toBeDefined();\n      expect(mockReplace).toBeDefined();\n    });\n\n    test(\"should handle dynamic routes correctly\", () => {\n      useRouter.mockReturnValue({\n        route: \"/users/[id]\",\n        pathname: \"/users/[id]\",\n        query: { id: \"123\" },\n        asPath: \"/users/123\",\n        push: mockPush,\n        replace: mockReplace,\n      });\n\n      // This would test dynamic routing if we had such pages\n      const mockRouter = useRouter();\n      expect(mockRouter.query.id).toBe(\"123\");\n    });\n\n    test(\"should handle query parameters correctly\", () => {\n      useRouter.mockReturnValue({\n        route: \"/search\",\n        pathname: \"/search\",\n        query: { q: \"lightning bolt\", type: \"instant\" },\n        asPath: \"/search?q=lightning%20bolt&type=instant\",\n        push: mockPush,\n        replace: mockReplace,\n      });\n\n      const mockRouter = useRouter();\n      expect(mockRouter.query.q).toBe(\"lightning bolt\");\n      expect(mockRouter.query.type).toBe(\"instant\");\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    test(\"should handle 404 errors appropriately\", () => {\n      useRouter.mockReturnValue({\n        route: \"/404\",\n        pathname: \"/404\",\n        query: {},\n        asPath: \"/404\",\n        push: mockPush,\n        replace: mockReplace,\n      });\n\n      // This would test 404 handling if we had a 404 page\n      const mockRouter = useRouter();\n      expect(mockRouter.route).toBe(\"/404\");\n    });\n\n    test(\"should handle server errors gracefully\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        json: async () => ({ error: \"Internal server error\" }),\n      });\n\n      // This would test error handling in components\n      expect(fetch).toBeDefined();\n    });\n  });\n});\n"],"names":["jest","mock","useRouter","fn","MockLayout","children","div","data-testid","MockUserSelector","onUserSelect","currentUser","button","onClick","id","username","MockLoading","global","fetch","localStorageMock","getItem","setItem","removeItem","clear","Object","defineProperty","window","value","writable","Home","require","default","describe","mockPush","mockReplace","beforeEach","mockReturnValue","route","pathname","query","asPath","push","replace","mockClear","afterEach","resetAllMocks","test","render","expect","screen","getByTestId","toBeInTheDocument","savedUser","JSON","stringify","toHaveBeenCalledWith","getByText","user","userEvent","setup","click","toBeDefined","MockSearchPage","searchQuery","setSearchQuery","React","useState","searchResults","setSearchResults","loading","setLoading","handleSearch","response","data","json","error","console","h1","form","onSubmit","e","preventDefault","input","type","onChange","target","placeholder","disabled","map","card","index","name","searchInput","toBe","mockSearchData","mockResolvedValueOnce","ok","searchButton","waitFor","mockImplementation","Promise","getAllByText","toHaveLength","toBeDisabled","MockFavouritesPage","favourites","setFavourites","useEffect","loadFavourites","removeFavourite","favouriteId","method","filter","fav","length","favourite","h3","card_name","p","notes","mockFavourites","user_id","message","queryByText","not","MockProfilePage","setUser","editing","setEditing","newUsername","setNewUsername","localStorage","parse","updateProfile","trim","headers","body","updatedUser","deleteProfile","h2","Date","created_at","toLocaleDateString","style","marginLeft","background","toHaveValue","usernameInput","queryByTestId","MockApiTestPage","apiStatus","setApiStatus","testResults","setTestResults","testApiEndpoint","endpoint","result","status","timestamp","toISOString","prev","runHealthCheck","runFullApiTest","endpoints","path","span","toHaveTextContent","toHaveBeenCalledTimes","mockRejectedValueOnce","Error","mockRouter","q"],"mappings":"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"}