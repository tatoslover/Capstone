{"version":3,"names":["FavouritesPage","cov_2dw7kcspsc","f","router","s","_router","useRouter","currentUser","setCurrentUser","_react","useState","favourites","setFavourites","loading","setLoading","error","setError","actionLoading","setActionLoading","isOnline","setIsOnline","sortBy","setSortBy","filterBy","setFilterBy","searchFilter","setSearchFilter","currentPage","setCurrentPage","resultsPerPage","useEffect","urlParams","URLSearchParams","window","location","search","get","b","localStorage","removeItem","history","replaceState","pathname","handleConnectionChange","online","_apiService","addConnectionListener","apiService","savedUser","getItem","user","JSON","parse","fetchFavourites","id","e","removeConnectionListener","length","getCardColour","favourite","color_identity","split","mana_cost","colours","includes","push","name","card_name","toLowerCase","ability","ability_type","userId","users","getById","userError","console","warn","favouritesData","getByUserId","Array","isArray","cardPromises","map","fav","scryfall_id","cardData","cards","favourite_id","notes","created_at","image_uris","type_line","rarity","cardError","cardsWithFavouriteData","Promise","all","validFavourites","filter","card","isValid","oracle_text","log","err","message","abilityTypes","useMemo","types","Set","type","sort","rarities","rarityList","filteredAndSortedResults","filtered","trim","startsWith","replace","a","Date","localeCompare","aCmc","cmc","bCmc","rarityOrder","common","uncommon","rare","mythic","typeA","typeB","totalPages","Math","ceil","startIndex","paginatedResults","slice","handleRemoveFavourite","showNotification","delete","prevFavourites","notification","document","createElement","style","cssText","textContent","head","appendChild","body","setTimeout","parentNode","animation","removeChild","_jsxruntime","jsx","_Layout","default","title","className","jsxs","maxWidth","margin","fontSize","marginBottom","flexWrap","onClick","reload","href","marginTop","color","username","_Loading","size","min","value","onChange","target","placeholder","count","charAt","toUpperCase","Fragment","index","_SearchCard","onRemoveFavourite","showFavouriteButton","isFavourite","disabled","from","_","i","pageNum","paddingLeft"],"sources":["/Users/samuellove/Documents/GitHub/Capstone/frontend/pages/favourites.js"],"sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Layout from \"../components/Layout/Layout\";\nimport SearchCard from \"../components/Search/SearchCard\";\nimport Loading from \"../components/UI/Loading\";\nimport {\n  apiService,\n  addConnectionListener,\n  removeConnectionListener,\n} from \"../services/apiService\";\n\nexport default function FavouritesPage() {\n  const router = useRouter();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [favourites, setFavourites] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [actionLoading, setActionLoading] = useState(false);\n  const [isOnline, setIsOnline] = useState(true);\n\n  // Filtering and sorting state\n  const [sortBy, setSortBy] = useState(\"newest\");\n  const [filterBy, setFilterBy] = useState(\"all\");\n  const [searchFilter, setSearchFilter] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const resultsPerPage = 10;\n\n  // Load user from localStorage on mount\n  useEffect(() => {\n    // Check for reset query parameter\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('reset') === 'true') {\n      localStorage.removeItem(\"currentUser\");\n      window.history.replaceState({}, '', window.location.pathname);\n      setLoading(false);\n      return;\n    }\n\n    // Listen for connection status changes first\n    const handleConnectionChange = (online) => {\n      setIsOnline(online);\n    };\n\n    addConnectionListener(handleConnectionChange);\n\n    // Get initial connection status\n    setIsOnline(apiService.isOnline());\n\n    const savedUser = localStorage.getItem(\"currentUser\");\n    if (savedUser) {\n      try {\n        const user = JSON.parse(savedUser);\n        setCurrentUser(user);\n        // Check connection and fetch if online\n        if (apiService.isOnline()) {\n          fetchFavourites(user.id);\n        } else {\n          setLoading(false);\n        }\n      } catch (e) {\n        localStorage.removeItem(\"currentUser\");\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n    }\n\n    return () => {\n      removeConnectionListener(handleConnectionChange);\n    };\n  }, []);\n\n  // Separate effect to handle connection changes for existing users\n  useEffect(() => {\n    if (isOnline && currentUser && favourites.length === 0 && !loading) {\n      fetchFavourites(currentUser.id);\n    }\n  }, [isOnline, currentUser]);\n\n  // Helper function to determine card colour from stored data or fallback to inference\n  const getCardColour = (favourite) => {\n    // First, try to use stored color_identity\n    if (favourite.color_identity) {\n      return favourite.color_identity.split('');\n    }\n\n    // If no stored color_identity, try to infer from mana_cost\n    if (favourite.mana_cost) {\n      const colours = [];\n      if (favourite.mana_cost.includes('{W}')) colours.push('W');\n      if (favourite.mana_cost.includes('{U}')) colours.push('U');\n      if (favourite.mana_cost.includes('{B}')) colours.push('B');\n      if (favourite.mana_cost.includes('{R}')) colours.push('R');\n      if (favourite.mana_cost.includes('{G}')) colours.push('G');\n      return colours;\n    }\n\n    // Fallback to name/ability inference\n    const name = (favourite.card_name || \"\").toLowerCase();\n    const ability = (favourite.ability_type || \"\").toLowerCase();\n\n    // Check for colour-specific keywords in card name\n    if (name.includes(\"lightning\") || name.includes(\"bolt\") || name.includes(\"fire\") ||\n        name.includes(\"burn\") || name.includes(\"flame\") || name.includes(\"dragon\")) {\n      return [\"R\"]; // Red\n    }\n    if (name.includes(\"angel\") || name.includes(\"serra\") || name.includes(\"soul\") ||\n        name.includes(\"healer\") || name.includes(\"cleric\")) {\n      return [\"W\"]; // White\n    }\n    if (name.includes(\"counter\") || name.includes(\"draw\") || name.includes(\"island\") ||\n        name.includes(\"merfolk\") || name.includes(\"wizard\")) {\n      return [\"U\"]; // Blue\n    }\n    if (name.includes(\"death\") || name.includes(\"dark\") || name.includes(\"zombie\") ||\n        name.includes(\"vampire\") || name.includes(\"swamp\")) {\n      return [\"B\"]; // Black\n    }\n    if (name.includes(\"elf\") || name.includes(\"forest\") || name.includes(\"beast\") ||\n        name.includes(\"growth\") || name.includes(\"nature\")) {\n      return [\"G\"]; // Green\n    }\n\n    // Check for colour-specific keywords in ability type\n    if (ability.includes(\"angel\") || ability.includes(\"cleric\") || ability.includes(\"soldier\")) {\n      return [\"W\"]; // White\n    }\n    if (ability.includes(\"wizard\") || ability.includes(\"merfolk\") || ability.includes(\"bird\")) {\n      return [\"U\"]; // Blue\n    }\n    if (ability.includes(\"zombie\") || ability.includes(\"vampire\") || ability.includes(\"demon\")) {\n      return [\"B\"]; // Black\n    }\n    if (ability.includes(\"dragon\") || ability.includes(\"goblin\") || ability.includes(\"warrior\")) {\n      return [\"R\"]; // Red\n    }\n    if (ability.includes(\"elf\") || ability.includes(\"beast\") || ability.includes(\"druid\")) {\n      return [\"G\"]; // Green\n    }\n\n    // Default to colourless\n    return [];\n  };\n\n\n\n  const fetchFavourites = async (userId) => {\n    if (!isOnline) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(\"\");\n\n      // First verify that the user exists\n      try {\n        await apiService.users.getById(userId);\n      } catch (userError) {\n        console.warn(`User ID ${userId} not found, clearing stored user`);\n        localStorage.removeItem(\"currentUser\");\n        setCurrentUser(null);\n        setFavourites([]);\n        setError(\"The selected user no longer exists. Please select a valid user.\");\n        setLoading(false);\n        return;\n      }\n\n      // Get favourites list from backend\n      const favouritesData = await apiService.favourites.getByUserId(userId);\n\n      if (!Array.isArray(favouritesData) || favouritesData.length === 0) {\n        setFavourites([]);\n        return;\n      }\n\n      // Fetch actual card data from Scryfall for each favourite\n      const cardPromises = favouritesData.map(async (fav) => {\n        try {\n          if (fav.scryfall_id) {\n            const cardData = await apiService.cards.getById(fav.scryfall_id);\n            // Merge Scryfall card data with favourite metadata\n            return {\n              ...cardData,\n              favourite_id: fav.id,\n              notes: fav.notes,\n              created_at: fav.created_at,\n              ability_type: fav.ability_type,\n            };\n          } else {\n            // Fallback for favourites without scryfall_id\n            return {\n              id: fav.id,\n              name: fav.card_name || \"Unknown Card\",\n              favourite_id: fav.id,\n              notes: fav.notes,\n              created_at: fav.created_at,\n              ability_type: fav.ability_type,\n              // Add placeholder-friendly properties\n              image_uris: null, // Ensure placeholder is shown\n              color_identity: getCardColour(fav),\n              type_line: fav.ability_type || \"Unknown Type\",\n              mana_cost: fav.mana_cost || null,\n              rarity: \"common\",\n            };\n          }\n        } catch (cardError) {\n          console.warn(\n            `Failed to fetch card data for favourite ${fav.id}:`,\n            cardError,\n          );\n          // Return fallback data if Scryfall fetch fails\n          return {\n            id: fav.scryfall_id || fav.id,\n            name: fav.card_name || \"Unknown Card\",\n            favourite_id: fav.id,\n            notes: fav.notes,\n            created_at: fav.created_at,\n            ability_type: fav.ability_type,\n            // Add placeholder-friendly properties\n            image_uris: null, // Ensure placeholder is shown\n            color_identity: getCardColour(fav),\n            type_line: fav.ability_type || \"Unknown Type\",\n            mana_cost: fav.mana_cost || null,\n            rarity: \"common\",\n          };\n        }\n      });\n\n      const cardsWithFavouriteData = await Promise.all(cardPromises);\n\n      // Filter out favourites with incomplete essential data\n      const validFavourites = cardsWithFavouriteData.filter(card => {\n        // Ensure card has essential properties for good UX\n        const isValid = card &&\n               card.name &&\n               (card.id || card.favourite_id) &&\n               (card.type_line || card.oracle_text || card.mana_cost || card.ability_type);\n\n        if (!isValid && card) {\n          console.warn(`Filtering out incomplete favourite: ${card.name || 'Unknown'} - missing essential data`);\n        }\n\n        return isValid;\n      });\n\n      if (validFavourites.length < cardsWithFavouriteData.length) {\n        console.log(`Filtered favourites: ${validFavourites.length}/${cardsWithFavouriteData.length} cards had complete data`);\n      }\n\n      setFavourites(validFavourites);\n    } catch (err) {\n      console.error(\"Error fetching favourites:\", err);\n\n      // Handle specific API errors\n      if (err.message && err.message.includes(\"404\")) {\n        localStorage.removeItem(\"currentUser\");\n        setCurrentUser(null);\n        setError(\"User not found. Please select a valid user.\");\n      } else {\n        setError(\"Failed to load your favourites. Please try again.\");\n      }\n      setFavourites([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Extract unique ability types for filtering\n  const abilityTypes = useMemo(() => {\n    const types = [\n      ...new Set(\n        favourites\n          .map((fav) => fav.ability_type)\n          .filter((type) => type && type !== \"\"),\n      ),\n    ];\n    return types.sort();\n  }, [favourites]);\n\n  // Extract unique rarities for filtering\n  const rarities = useMemo(() => {\n    const rarityList = [\n      ...new Set(\n        favourites.map((card) => card.rarity).filter((rarity) => rarity),\n      ),\n    ];\n    return rarityList.sort();\n  }, [favourites]);\n\n  // Filter and sort results\n  const filteredAndSortedResults = useMemo(() => {\n    let filtered = [...favourites];\n\n    // Apply search filter\n    if (searchFilter.trim()) {\n      const search = searchFilter.toLowerCase();\n      filtered = filtered.filter(\n        (card) =>\n          card.name.toLowerCase().includes(search) ||\n          (card.oracle_text &&\n            card.oracle_text.toLowerCase().includes(search)) ||\n          (card.type_line && card.type_line.toLowerCase().includes(search)) ||\n          (card.notes && card.notes.toLowerCase().includes(search)),\n      );\n    }\n\n    // Apply type filter\n    if (filterBy !== \"all\") {\n      if (filterBy.startsWith(\"type-\")) {\n        const type = filterBy.replace(\"type-\", \"\");\n        filtered = filtered.filter((card) => card.ability_type === type);\n      } else if (filterBy.startsWith(\"rarity-\")) {\n        const rarity = filterBy.replace(\"rarity-\", \"\");\n        filtered = filtered.filter((card) => card.rarity === rarity);\n      }\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case \"newest\":\n          return new Date(b.created_at) - new Date(a.created_at);\n        case \"oldest\":\n          return new Date(a.created_at) - new Date(b.created_at);\n        case \"name\":\n          return a.name.localeCompare(b.name);\n        case \"name-desc\":\n          return b.name.localeCompare(a.name);\n        case \"mana-cost\":\n          const aCmc = a.cmc || 0;\n          const bCmc = b.cmc || 0;\n          return aCmc - bCmc;\n        case \"rarity\":\n          const rarityOrder = { common: 1, uncommon: 2, rare: 3, mythic: 4 };\n          return (rarityOrder[a.rarity] || 0) - (rarityOrder[b.rarity] || 0);\n        case \"type\":\n          const typeA = a.ability_type || \"zzz\";\n          const typeB = b.ability_type || \"zzz\";\n          return typeA.localeCompare(typeB);\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [favourites, searchFilter, filterBy, sortBy]);\n\n  // Pagination\n  const totalPages = Math.ceil(\n    filteredAndSortedResults.length / resultsPerPage,\n  );\n  const startIndex = (currentPage - 1) * resultsPerPage;\n  const paginatedResults = filteredAndSortedResults.slice(\n    startIndex,\n    startIndex + resultsPerPage,\n  );\n\n  // Reset to page 1 when filters change\n  useMemo(() => {\n    setCurrentPage(1);\n  }, [searchFilter, filterBy, sortBy]);\n\n  const handleRemoveFavourite = async (card) => {\n    if (!isOnline) {\n      showNotification(\"Cannot remove favourites while offline.\", \"error\");\n      return;\n    }\n\n    try {\n      setActionLoading(true);\n\n      await apiService.favourites.delete(card.favourite_id);\n\n      // Update local state\n      setFavourites((prevFavourites) =>\n        prevFavourites.filter((fav) => fav.favourite_id !== card.favourite_id),\n      );\n\n      showNotification(\"Card removed from favourites!\", \"success\");\n    } catch (err) {\n      console.error(\"Error deleting favourite:\", err);\n      showNotification(\n        \"Failed to remove from favourites. Please try again.\",\n        \"error\",\n      );\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const showNotification = (message, type = \"success\") => {\n    const notification = document.createElement(\"div\");\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: ${type === \"success\" ? \"#28a745\" : \"#dc3545\"};\n      color: white;\n      padding: 1rem 1.5rem;\n      border-radius: 0.5rem;\n      box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n      z-index: 1000;\n      font-weight: 500;\n      max-width: 300px;\n      animation: slideIn 0.3s ease-out;\n    `;\n    notification.textContent = message;\n\n    // Add CSS animation\n    const style = document.createElement(\"style\");\n    style.textContent = `\n      @keyframes slideIn {\n        from { transform: translateX(100%); opacity: 0; }\n        to { transform: translateX(0); opacity: 1; }\n      }\n    `;\n    document.head.appendChild(style);\n\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.style.animation = \"slideIn 0.3s ease-out reverse\";\n        setTimeout(() => {\n          document.body.removeChild(notification);\n          document.head.removeChild(style);\n        }, 300);\n      }\n    }, 3000);\n  };\n\n  // Show offline message if backend is not connected\n  if (!isOnline) {\n    return (\n      <Layout title=\"Favourites - Planeswalker's Primer\">\n        <div className=\"container page-content\">\n          <div\n            className=\"card text-center\"\n            style={{ maxWidth: \"600px\", margin: \"0 auto\" }}\n          >\n            <div style={{ fontSize: \"4rem\", marginBottom: \"1.5rem\" }}>🌐</div>\n            <h2 className=\"card-title\">Currently Offline</h2>\n            <p className=\"mb-3\" style={{ fontSize: \"1.1rem\" }}>\n              Your favourites require a connection to the backend server. Please\n              check your connection and try again.\n            </p>\n            <div\n              className=\"d-flex gap-2 justify-center\"\n              style={{ flexWrap: \"wrap\" }}\n            >\n              <button onClick={() => window.location.reload()} className=\"btn\">\n                🔄 Retry Connection\n              </button>\n              <a href=\"/search\" className=\"btn-outline\">\n                🔍 Search Cards Instead\n              </a>\n            </div>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  // Redirect to home if no user\n  if (!loading && !currentUser) {\n    return (\n      <Layout title=\"Favourites - Planeswalker's Primer\">\n        <div className=\"container page-content\">\n          <div\n            className=\"card text-center\"\n            style={{ maxWidth: \"600px\", margin: \"0 auto\" }}\n          >\n            <div style={{ fontSize: \"4rem\", marginBottom: \"1.5rem\" }}>👤</div>\n            <h2 className=\"card-title\">Profile Required</h2>\n            <p className=\"mb-3\" style={{ fontSize: \"1.1rem\" }}>\n              You need to create a profile to save and view your favourite\n              cards.\n            </p>\n            <div\n              className=\"d-flex gap-2 justify-center\"\n              style={{ flexWrap: \"wrap\" }}\n            >\n              <a href=\"/profile\" className=\"btn-outline\">\n                Create Profile\n              </a>\n              <a href=\"/search\" className=\"btn\">\n                Browse Cards\n              </a>\n            </div>\n            <div style={{ marginTop: \"1rem\", fontSize: \"0.9rem\", color: \"var(--theme-textMuted)\" }}>\n              <p>Need to reset? <a href=\"/favourites?reset=true\" style={{ color: \"var(--theme-primary)\" }}>Clear stored user data</a></p>\n            </div>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout title=\"My Favourites - Planeswalker's Primer\">\n      <div className=\"container page-content\">\n        {/* Page Header */}\n        <div className=\"text-center mb-3\">\n          <div className=\"header-box\">\n            <h1>My Favourite Cards</h1>\n            <p>\n              {currentUser\n                ? `${currentUser.username}'s personal collection`\n                : \"Your saved MTG cards\"}\n            </p>\n            {currentUser && !loading && (\n              <p className=\"card-count\">\n                {favourites.length} {favourites.length === 1 ? \"card\" : \"cards\"}{\" \"}\n                saved\n              </p>\n            )}\n          </div>\n        </div>\n\n        {/* Loading State */}\n        {loading && (\n          <div className=\"loading-container\">\n            <Loading message=\"Loading your favourites...\" size=\"large\" />\n          </div>\n        )}\n\n        {/* Error State */}\n        {error && !loading && (\n          <div className=\"error text-center mt-2 mb-2\">\n            <h3 className=\"mb-2\">Unable to Load Favourites</h3>\n            <p className=\"mb-3\">{error}</p>\n            <button\n              onClick={() => currentUser && fetchFavourites(currentUser.id)}\n              className=\"btn\"\n            >\n              Try Again\n            </button>\n          </div>\n        )}\n\n        {/* Search and Filter Controls */}\n        {!loading && !error && currentUser && favourites.length > 0 && (\n          <div className=\"card mb-3\">\n            {/* Search within results */}\n            <div className=\"form-group\">\n              <div className=\"search-results-header-combined\">\n                <h3 className=\"search-results-title\">\n                  ⭐ Your Favourites - Found {favourites.length} cards\n                </h3>\n                <p className=\"search-results-query\">Your saved collection</p>\n                {filteredAndSortedResults.length > resultsPerPage && (\n                  <p className=\"pagination-info\">\n                    Page {currentPage} of {totalPages} ({startIndex + 1}-\n                    {Math.min(\n                      startIndex + resultsPerPage,\n                      filteredAndSortedResults.length,\n                    )}{\" \"}\n                    of {filteredAndSortedResults.length} results)\n                  </p>\n                )}\n                <label className=\"form-label\">Filter favourites:</label>\n              </div>\n              <input\n                type=\"text\"\n                value={searchFilter}\n                onChange={(e) => setSearchFilter(e.target.value)}\n                placeholder=\"Filter by card name, text, notes, or type...\"\n                className=\"search-input\"\n              />\n            </div>\n\n            {/* Filters */}\n            <div className=\"filters-grid\">\n              {/* Sort By */}\n              <div className=\"form-group\">\n                <label className=\"form-label\">📊 Sort By</label>\n                <select\n                  value={sortBy}\n                  onChange={(e) => setSortBy(e.target.value)}\n                  className=\"filter-select\"\n                >\n                  <option value=\"newest\">Newest First</option>\n                  <option value=\"oldest\">Oldest First</option>\n                  <option value=\"name\">Name A-Z</option>\n                  <option value=\"name-desc\">Name Z-A</option>\n                  <option value=\"mana-cost\">Mana Cost</option>\n                  <option value=\"rarity\">Rarity</option>\n                  <option value=\"type\">Ability Type</option>\n                </select>\n              </div>\n\n              {/* Filter By Type */}\n              <div className=\"form-group\">\n                <label className=\"form-label\">🎯 Filter By</label>\n                <select\n                  value={filterBy}\n                  onChange={(e) => setFilterBy(e.target.value)}\n                  className=\"filter-select\"\n                >\n                  <option value=\"all\">All Cards ({favourites.length})</option>\n                  {abilityTypes.map((type) => {\n                    const count = favourites.filter(\n                      (card) => card.ability_type === type,\n                    ).length;\n                    return (\n                      <option key={type} value={`type-${type}`}>\n                        {type} ({count})\n                      </option>\n                    );\n                  })}\n                  {rarities.map((rarity) => {\n                    const count = favourites.filter(\n                      (card) => card.rarity === rarity,\n                    ).length;\n                    return (\n                      <option key={rarity} value={`rarity-${rarity}`}>\n                        {rarity.charAt(0).toUpperCase() + rarity.slice(1)} (\n                        {count})\n                      </option>\n                    );\n                  })}\n                </select>\n              </div>\n            </div>\n\n            {/* Clear Filters */}\n            {(searchFilter || filterBy !== \"all\" || sortBy !== \"newest\") && (\n              <div className=\"filter-clear-section\">\n                <button\n                  onClick={() => {\n                    setSearchFilter(\"\");\n                    setFilterBy(\"all\");\n                    setSortBy(\"newest\");\n                  }}\n                  className=\"btn btn-secondary\"\n                >\n                  Clear All Filters\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Show filtered results info if applicable */}\n        {!loading &&\n          !error &&\n          filteredAndSortedResults.length !== favourites.length &&\n          favourites.length > 0 && (\n            <div className=\"card mb-2\">\n              <p className=\"search-results-filtered\">\n                Showing {filteredAndSortedResults.length} filtered results\n                {searchFilter && ` matching \"${searchFilter}\"`}\n              </p>\n            </div>\n          )}\n\n        {/* Results */}\n        {!loading && !error && currentUser && (\n          <>\n            {favourites.length === 0 ? (\n              <div className=\"search-empty-state card\">\n                <div className=\"search-empty-icon\">⭐</div>\n                <h3 className=\"search-empty-title\">No Favourites Yet</h3>\n                <div className=\"search-empty-content\">\n                  <p className=\"search-empty-subtitle\">\n                    Start building your collection by searching for cards and\n                    clicking the ⭐ button!\n                  </p>\n                  <div className=\"mt-3\">\n                    <a href=\"/search\" className=\"btn\">\n                      🔍 Search for Cards\n                    </a>\n                  </div>\n                </div>\n              </div>\n            ) : filteredAndSortedResults.length === 0 ? (\n              <div className=\"search-empty-state card\">\n                <div className=\"search-empty-icon\">🔍</div>\n                <h3 className=\"search-empty-title\">No matches found</h3>\n                <p className=\"search-empty-subtitle\">\n                  Try adjusting your search or filter settings.\n                </p>\n              </div>\n            ) : (\n              <div>\n                {/* Results Grid */}\n                <div className=\"cards-grid\">\n                  {paginatedResults.map((card, index) => (\n                    <div\n                      key={card.favourite_id || card.id}\n                      className={`fade-in fade-in-delay-${Math.min(index + 1, 5)}`}\n                    >\n                      <SearchCard\n                        card={card}\n                        currentUser={currentUser}\n                        onRemoveFavourite={handleRemoveFavourite}\n                        showFavouriteButton={true}\n                        isFavourite={true}\n                      />\n                    </div>\n                  ))}\n                </div>\n\n                {/* Pagination Controls */}\n                {totalPages > 1 && (\n                  <div className=\"pagination-controls card\">\n                    <div className=\"pagination-buttons\">\n                      <button\n                        onClick={() => setCurrentPage(1)}\n                        disabled={currentPage === 1}\n                        className=\"btn btn-secondary pagination-btn\"\n                      >\n                        First\n                      </button>\n                      <button\n                        onClick={() => setCurrentPage(currentPage - 1)}\n                        disabled={currentPage === 1}\n                        className=\"btn btn-secondary pagination-btn\"\n                      >\n                        Previous\n                      </button>\n\n                      {/* Page numbers */}\n                      <div className=\"page-numbers\">\n                        {Array.from(\n                          { length: Math.min(5, totalPages) },\n                          (_, i) => {\n                            let pageNum;\n                            if (totalPages <= 5) {\n                              pageNum = i + 1;\n                            } else if (currentPage <= 3) {\n                              pageNum = i + 1;\n                            } else if (currentPage >= totalPages - 2) {\n                              pageNum = totalPages - 4 + i;\n                            } else {\n                              pageNum = currentPage - 2 + i;\n                            }\n\n                            return (\n                              <button\n                                key={pageNum}\n                                onClick={() => setCurrentPage(pageNum)}\n                                className={`btn ${currentPage === pageNum ? \"btn-primary\" : \"btn-secondary\"} pagination-btn`}\n                              >\n                                {pageNum}\n                              </button>\n                            );\n                          },\n                        )}\n                      </div>\n\n                      <button\n                        onClick={() => setCurrentPage(currentPage + 1)}\n                        disabled={currentPage === totalPages}\n                        className=\"btn btn-secondary pagination-btn\"\n                      >\n                        Next\n                      </button>\n                      <button\n                        onClick={() => setCurrentPage(totalPages)}\n                        disabled={currentPage === totalPages}\n                        className=\"btn btn-secondary pagination-btn\"\n                      >\n                        Last\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </>\n        )}\n\n        {/* Help Section */}\n        {!loading && currentUser && favourites.length === 0 && !error && (\n          <div className=\"card mt-3\">\n            <h4 className=\"card-title\">\n              💡 How to Build Your Favourites Collection\n            </h4>\n            <ol style={{ paddingLeft: \"1.5rem\" }}>\n              <li className=\"mb-1\">\n                <strong>Search for cards:</strong> Use the search page to find\n                interesting cards\n              </li>\n              <li className=\"mb-1\">\n                <strong>Click the ⭐ button:</strong> Save cards that catch your\n                attention\n              </li>\n              <li className=\"mb-1\">\n                <strong>Add personal notes:</strong> Remember why each card is\n                useful to you\n              </li>\n              <li className=\"mb-1\">\n                <strong>Organise and review:</strong> Use filters to find cards\n                quickly during games\n              </li>\n            </ol>\n          </div>\n        )}\n      </div>\n\n      <style jsx>{`\n        .header-box {\n          max-width: 800px;\n          margin: 0 auto;\n        }\n\n        .card-count {\n          font-size: 1.1rem;\n          color: var(--theme-textLight);\n          margin-top: 0.5rem;\n          margin-bottom: 0;\n        }\n      `}</style>\n    </Layout>\n  );\n}\n"],"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","ignoreList":[]}