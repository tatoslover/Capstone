bb195421acbd9c9c262adbff8ada0706
"use strict";
// Mock the performance utils
jest.mock("../utils/performance", ()=>({
        getPerformanceMetrics: jest.fn(),
        logPerformanceSummary: jest.fn(),
        exportPerformanceData: jest.fn(),
        initPerformanceMonitoring: jest.fn()
    }));
// Mock the API service
jest.mock("../services/apiService", ()=>({
        apiService: {
            health: jest.fn()
        },
        addConnectionListener: jest.fn(),
        removeConnectionListener: jest.fn()
    }));
// Mock the performance components
jest.mock("../components/PerformanceDashboard", ()=>{
    return function MockPerformanceDashboard({ isVisible, embedded }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "performance-dashboard",
            children: [
                "Performance Dashboard Mock",
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    "data-testid": "dashboard-visible",
                    children: isVisible ? "visible" : "hidden"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    "data-testid": "dashboard-embedded",
                    children: embedded ? "embedded" : "floating"
                })
            ]
        });
    };
});
jest.mock("../components/PerformanceOverview", ()=>{
    return function MockPerformanceOverview({ metrics }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "performance-overview",
            children: [
                "Performance Overview Mock",
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    "data-testid": "metrics-loaded",
                    children: metrics ? "loaded" : "loading"
                })
            ]
        });
    };
});
jest.mock("../components/PerformanceHealthIndicator", ()=>{
    return function MockPerformanceHealthIndicator({ metrics, backendStatus }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "performance-health",
            children: [
                "Performance Health Mock",
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    "data-testid": "health-status",
                    children: backendStatus
                })
            ]
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _documentation = /*#__PURE__*/ _interop_require_default(require("../pages/documentation"));
const _ThemeContext = require("../contexts/ThemeContext");
const _performance = /*#__PURE__*/ _interop_require_wildcard(require("../utils/performance"));
const _apiService = /*#__PURE__*/ _interop_require_wildcard(require("../services/apiService"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock fetch for backend metrics
global.fetch = jest.fn();
const mockPerformanceMetrics = {
    session: {
        duration: 45000,
        start: Date.now() - 45000
    },
    apiCalls: {
        total: 5,
        successful: 4,
        failed: 1,
        averageResponseTime: 350,
        slowCalls: []
    },
    userInteractions: {
        total: 12,
        averageResponseTime: 50,
        slowInteractions: []
    },
    errors: {
        total: 0,
        recent: []
    },
    memory: {
        usedJSHeapSize: 25000000,
        totalJSHeapSize: 50000000,
        jsHeapSizeLimit: 100000000,
        usedPercentage: 50
    },
    webVitals: {
        lcp: {
            value: 2000,
            rating: "good"
        },
        fid: {
            value: 80,
            rating: "good"
        },
        cls: {
            value: 0.05,
            rating: "good"
        }
    },
    connection: {
        effectiveType: "4g",
        downlink: 10,
        rtt: 100
    }
};
const mockBackendMetrics = {
    status: "optimal",
    uptime: "2h 15m",
    averageResponseTime: 120,
    errorRate: 0.5
};
const renderDocumentationWithTheme = ()=>{
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_documentation.default, {})
    }));
};
describe("Performance Dashboard Integration in Documentation", ()=>{
    beforeEach(()=>{
        // Reset all mocks
        jest.clearAllMocks();
        // Setup default mock returns
        _performance.getPerformanceMetrics.mockReturnValue(mockPerformanceMetrics);
        _apiService.apiService.health.mockResolvedValue({
            status: "OK"
        });
        global.fetch.mockImplementation((url)=>{
            if (url.includes("/api/monitoring/performance")) {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve(mockBackendMetrics)
                });
            }
            return Promise.reject(new Error("Unknown endpoint"));
        });
        // Mock URL and DOM APIs
        global.URL.createObjectURL = jest.fn(()=>"mock-url");
        global.URL.revokeObjectURL = jest.fn();
        // Mock document.createElement for export functionality
        const mockElement = {
            href: "",
            download: "",
            click: jest.fn()
        };
        document.createElement = jest.fn(()=>mockElement);
        document.body.appendChild = jest.fn();
        document.body.removeChild = jest.fn();
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    test("renders performance section button in documentation", ()=>{
        renderDocumentationWithTheme();
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        expect(performanceButton).toBeInTheDocument();
    });
    test("shows performance content when section is selected", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        expect(_react1.screen.getByText(/Real-time Performance Dashboard/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/Monitor application performance/i)).toBeInTheDocument();
    });
    test("renders performance overview component when section is active", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        expect(_react1.screen.getByTestId("performance-overview")).toBeInTheDocument();
    });
    test("renders performance health indicator when section is active", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        expect(_react1.screen.getByTestId("performance-health")).toBeInTheDocument();
    });
    test("toggles detailed dashboard visibility", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        // Open performance section
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        // Initially dashboard should not be visible
        expect(_react1.screen.queryByTestId("performance-dashboard")).not.toBeInTheDocument();
        // Click show detailed dashboard
        const showDashboardButton = _react1.screen.getByRole("button", {
            name: /Show Detailed Dashboard/i
        });
        await user.click(showDashboardButton);
        // Dashboard should now be visible and embedded
        expect(_react1.screen.getByTestId("performance-dashboard")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("dashboard-visible")).toHaveTextContent("visible");
        expect(_react1.screen.getByTestId("dashboard-embedded")).toHaveTextContent("embedded");
        // Click hide dashboard
        const hideDashboardButton = _react1.screen.getByRole("button", {
            name: /Hide Detailed Dashboard/i
        });
        await user.click(hideDashboardButton);
        // Dashboard should be hidden again
        expect(_react1.screen.queryByTestId("performance-dashboard")).not.toBeInTheDocument();
    });
    test("refresh metrics button calls performance utilities", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        // Open performance section
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        // Wait for initial load
        await (0, _react1.waitFor)(()=>{
            expect(_performance.getPerformanceMetrics).toHaveBeenCalled();
        });
        // Click refresh metrics
        const refreshButton = _react1.screen.getByRole("button", {
            name: /Refresh Metrics/i
        });
        await user.click(refreshButton);
        // Should call performance utilities again
        expect(_performance.getPerformanceMetrics).toHaveBeenCalledTimes(2);
        expect(global.fetch).toHaveBeenCalledWith("http://localhost:3001/api/monitoring/performance");
    });
    test("export report button creates downloadable file", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        // Open performance section
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        // Click export report
        const exportButton = _react1.screen.getByRole("button", {
            name: /Export Report/i
        });
        await user.click(exportButton);
        // Should create blob and trigger download
        expect(global.URL.createObjectURL).toHaveBeenCalled();
        expect(document.createElement).toHaveBeenCalledWith("a");
        expect(document.body.appendChild).toHaveBeenCalled();
        expect(document.body.removeChild).toHaveBeenCalled();
    });
    test("log to console button calls performance summary", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        // Open performance section
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        // Click log to console
        const logButton = _react1.screen.getByRole("button", {
            name: /Log to Console/i
        });
        await user.click(logButton);
        expect(_performance.logPerformanceSummary).toHaveBeenCalled();
    });
    test("fetches backend metrics when performance section is opened", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        await (0, _react1.waitFor)(()=>{
            expect(global.fetch).toHaveBeenCalledWith("http://localhost:3001/api/monitoring/performance");
        });
    });
    test("handles backend metrics fetch error gracefully", async ()=>{
        const user = _userevent.default.setup();
        // Mock fetch to reject
        global.fetch.mockRejectedValue(new Error("Network error"));
        renderDocumentationWithTheme();
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        // Should not crash and should still render components
        expect(_react1.screen.getByTestId("performance-overview")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("performance-health")).toBeInTheDocument();
    });
    test("auto-refreshes metrics when detailed dashboard is visible", async ()=>{
        const user = _userevent.default.setup();
        // Mock timers
        jest.useFakeTimers();
        renderDocumentationWithTheme();
        // Open performance section
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        // Show detailed dashboard to trigger auto-refresh
        const showDashboardButton = _react1.screen.getByRole("button", {
            name: /Show Detailed Dashboard/i
        });
        await user.click(showDashboardButton);
        // Fast-forward time to trigger refresh
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(5000);
        });
        await (0, _react1.waitFor)(()=>{
            expect(_performance.getPerformanceMetrics).toHaveBeenCalledTimes(3); // Initial + manual + auto-refresh
        });
        jest.useRealTimers();
    });
    test("stops auto-refresh when detailed dashboard is hidden", async ()=>{
        const user = _userevent.default.setup();
        jest.useFakeTimers();
        renderDocumentationWithTheme();
        // Open performance section and show dashboard
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        const showDashboardButton = _react1.screen.getByRole("button", {
            name: /Show Detailed Dashboard/i
        });
        await user.click(showDashboardButton);
        // Hide dashboard
        const hideDashboardButton = _react1.screen.getByRole("button", {
            name: /Hide Detailed Dashboard/i
        });
        await user.click(hideDashboardButton);
        // Fast-forward time - should not trigger additional refreshes
        (0, _react1.act)(()=>{
            jest.advanceTimersByTime(10000);
        });
        // Should not have additional calls beyond initial setup
        expect(_performance.getPerformanceMetrics).toHaveBeenCalledTimes(2); // Initial + manual only
        jest.useRealTimers();
    });
    test("renders performance features documentation", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        expect(_react1.screen.getByText(/Web Vitals Monitoring/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/API Performance/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/Memory Monitoring/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/Error Tracking/i)).toBeInTheDocument();
    });
    test("renders developer tools documentation", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        expect(_react1.screen.getByText(/Ctrl\+Shift\+P/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/window\.performanceUtils/i)).toBeInTheDocument();
    });
    test("renders performance optimisation tips", async ()=>{
        const user = _userevent.default.setup();
        renderDocumentationWithTheme();
        const performanceButton = _react1.screen.getByRole("button", {
            name: /ðŸš€ Performance Monitoring/i
        });
        await user.click(performanceButton);
        expect(_react1.screen.getByText(/Performance Optimisation Tips/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/Monitor memory usage regularly/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/Keep API response times under 500ms/i)).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,