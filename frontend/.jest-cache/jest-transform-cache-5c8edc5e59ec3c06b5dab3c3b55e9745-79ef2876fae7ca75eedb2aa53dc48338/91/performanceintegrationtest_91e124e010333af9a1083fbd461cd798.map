{"version":3,"sources":["/Users/samuellove/Documents/GitHub/Capstone/frontend/tests/performance-integration.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport Documentation from '../pages/documentation';\nimport { ThemeProvider } from '../contexts/ThemeContext';\nimport * as performanceUtils from '../utils/performance';\nimport * as apiService from '../services/apiService';\n\n// Mock the performance utils\njest.mock('../utils/performance', () => ({\n  getPerformanceMetrics: jest.fn(),\n  logPerformanceSummary: jest.fn(),\n  exportPerformanceData: jest.fn(),\n  initPerformanceMonitoring: jest.fn(),\n}));\n\n// Mock the API service\njest.mock('../services/apiService', () => ({\n  apiService: {\n    health: jest.fn(),\n  },\n  addConnectionListener: jest.fn(),\n  removeConnectionListener: jest.fn(),\n}));\n\n// Mock the performance components\njest.mock('../components/PerformanceDashboard', () => {\n  return function MockPerformanceDashboard({ isVisible, embedded }) {\n    return (\n      <div data-testid=\"performance-dashboard\">\n        Performance Dashboard Mock\n        <span data-testid=\"dashboard-visible\">{isVisible ? 'visible' : 'hidden'}</span>\n        <span data-testid=\"dashboard-embedded\">{embedded ? 'embedded' : 'floating'}</span>\n      </div>\n    );\n  };\n});\n\njest.mock('../components/PerformanceOverview', () => {\n  return function MockPerformanceOverview({ metrics }) {\n    return (\n      <div data-testid=\"performance-overview\">\n        Performance Overview Mock\n        <span data-testid=\"metrics-loaded\">{metrics ? 'loaded' : 'loading'}</span>\n      </div>\n    );\n  };\n});\n\njest.mock('../components/PerformanceHealthIndicator', () => {\n  return function MockPerformanceHealthIndicator({ metrics, backendStatus }) {\n    return (\n      <div data-testid=\"performance-health\">\n        Performance Health Mock\n        <span data-testid=\"health-status\">{backendStatus}</span>\n      </div>\n    );\n  };\n});\n\n// Mock fetch for backend metrics\nglobal.fetch = jest.fn();\n\nconst mockPerformanceMetrics = {\n  session: {\n    duration: 45000,\n    start: Date.now() - 45000,\n  },\n  apiCalls: {\n    total: 5,\n    successful: 4,\n    failed: 1,\n    averageResponseTime: 350,\n    slowCalls: [],\n  },\n  userInteractions: {\n    total: 12,\n    averageResponseTime: 50,\n    slowInteractions: [],\n  },\n  errors: {\n    total: 0,\n    recent: [],\n  },\n  memory: {\n    usedJSHeapSize: 25000000,\n    totalJSHeapSize: 50000000,\n    jsHeapSizeLimit: 100000000,\n    usedPercentage: 50,\n  },\n  webVitals: {\n    lcp: {\n      value: 2000,\n      rating: 'good',\n    },\n    fid: {\n      value: 80,\n      rating: 'good',\n    },\n    cls: {\n      value: 0.05,\n      rating: 'good',\n    },\n  },\n  connection: {\n    effectiveType: '4g',\n    downlink: 10,\n    rtt: 100,\n  },\n};\n\nconst mockBackendMetrics = {\n  status: 'optimal',\n  uptime: '2h 15m',\n  averageResponseTime: 120,\n  errorRate: 0.5,\n};\n\nconst renderDocumentationWithTheme = () => {\n  return render(\n    <ThemeProvider>\n      <Documentation />\n    </ThemeProvider>\n  );\n};\n\ndescribe('Performance Dashboard Integration in Documentation', () => {\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Setup default mock returns\n    performanceUtils.getPerformanceMetrics.mockReturnValue(mockPerformanceMetrics);\n    apiService.apiService.health.mockResolvedValue({ status: 'OK' });\n\n    global.fetch.mockImplementation((url) => {\n      if (url.includes('/api/monitoring/performance')) {\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve(mockBackendMetrics),\n        });\n      }\n      return Promise.reject(new Error('Unknown endpoint'));\n    });\n\n    // Mock URL and DOM APIs\n    global.URL.createObjectURL = jest.fn(() => 'mock-url');\n    global.URL.revokeObjectURL = jest.fn();\n\n    // Mock document.createElement for export functionality\n    const mockElement = {\n      href: '',\n      download: '',\n      click: jest.fn(),\n    };\n    document.createElement = jest.fn(() => mockElement);\n    document.body.appendChild = jest.fn();\n    document.body.removeChild = jest.fn();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  test('renders performance section button in documentation', () => {\n    renderDocumentationWithTheme();\n\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n\n    expect(performanceButton).toBeInTheDocument();\n  });\n\n  test('shows performance content when section is selected', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n\n    await user.click(performanceButton);\n\n    expect(screen.getByText(/Real-time Performance Dashboard/i)).toBeInTheDocument();\n    expect(screen.getByText(/Monitor application performance/i)).toBeInTheDocument();\n  });\n\n  test('renders performance overview component when section is active', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n\n    await user.click(performanceButton);\n\n    expect(screen.getByTestId('performance-overview')).toBeInTheDocument();\n  });\n\n  test('renders performance health indicator when section is active', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n\n    await user.click(performanceButton);\n\n    expect(screen.getByTestId('performance-health')).toBeInTheDocument();\n  });\n\n  test('toggles detailed dashboard visibility', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    // Open performance section\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n    await user.click(performanceButton);\n\n    // Initially dashboard should not be visible\n    expect(screen.queryByTestId('performance-dashboard')).not.toBeInTheDocument();\n\n    // Click show detailed dashboard\n    const showDashboardButton = screen.getByRole('button', {\n      name: /Show Detailed Dashboard/i,\n    });\n    await user.click(showDashboardButton);\n\n    // Dashboard should now be visible and embedded\n    expect(screen.getByTestId('performance-dashboard')).toBeInTheDocument();\n    expect(screen.getByTestId('dashboard-visible')).toHaveTextContent('visible');\n    expect(screen.getByTestId('dashboard-embedded')).toHaveTextContent('embedded');\n\n    // Click hide dashboard\n    const hideDashboardButton = screen.getByRole('button', {\n      name: /Hide Detailed Dashboard/i,\n    });\n    await user.click(hideDashboardButton);\n\n    // Dashboard should be hidden again\n    expect(screen.queryByTestId('performance-dashboard')).not.toBeInTheDocument();\n  });\n\n  test('refresh metrics button calls performance utilities', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    // Open performance section\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n    await user.click(performanceButton);\n\n    // Wait for initial load\n    await waitFor(() => {\n      expect(performanceUtils.getPerformanceMetrics).toHaveBeenCalled();\n    });\n\n    // Click refresh metrics\n    const refreshButton = screen.getByRole('button', {\n      name: /Refresh Metrics/i,\n    });\n\n    await user.click(refreshButton);\n\n    // Should call performance utilities again\n    expect(performanceUtils.getPerformanceMetrics).toHaveBeenCalledTimes(2);\n    expect(global.fetch).toHaveBeenCalledWith('http://localhost:3001/api/monitoring/performance');\n  });\n\n  test('export report button creates downloadable file', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    // Open performance section\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n    await user.click(performanceButton);\n\n    // Click export report\n    const exportButton = screen.getByRole('button', {\n      name: /Export Report/i,\n    });\n\n    await user.click(exportButton);\n\n    // Should create blob and trigger download\n    expect(global.URL.createObjectURL).toHaveBeenCalled();\n    expect(document.createElement).toHaveBeenCalledWith('a');\n    expect(document.body.appendChild).toHaveBeenCalled();\n    expect(document.body.removeChild).toHaveBeenCalled();\n  });\n\n  test('log to console button calls performance summary', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    // Open performance section\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n    await user.click(performanceButton);\n\n    // Click log to console\n    const logButton = screen.getByRole('button', {\n      name: /Log to Console/i,\n    });\n\n    await user.click(logButton);\n\n    expect(performanceUtils.logPerformanceSummary).toHaveBeenCalled();\n  });\n\n  test('fetches backend metrics when performance section is opened', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n\n    await user.click(performanceButton);\n\n    await waitFor(() => {\n      expect(global.fetch).toHaveBeenCalledWith('http://localhost:3001/api/monitoring/performance');\n    });\n  });\n\n  test('handles backend metrics fetch error gracefully', async () => {\n    const user = userEvent.setup();\n\n    // Mock fetch to reject\n    global.fetch.mockRejectedValue(new Error('Network error'));\n\n    renderDocumentationWithTheme();\n\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n\n    await user.click(performanceButton);\n\n    // Should not crash and should still render components\n    expect(screen.getByTestId('performance-overview')).toBeInTheDocument();\n    expect(screen.getByTestId('performance-health')).toBeInTheDocument();\n  });\n\n  test('auto-refreshes metrics when detailed dashboard is visible', async () => {\n    const user = userEvent.setup();\n\n    // Mock timers\n    jest.useFakeTimers();\n\n    renderDocumentationWithTheme();\n\n    // Open performance section\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n    await user.click(performanceButton);\n\n    // Show detailed dashboard to trigger auto-refresh\n    const showDashboardButton = screen.getByRole('button', {\n      name: /Show Detailed Dashboard/i,\n    });\n    await user.click(showDashboardButton);\n\n    // Fast-forward time to trigger refresh\n    act(() => {\n      jest.advanceTimersByTime(5000);\n    });\n\n    await waitFor(() => {\n      expect(performanceUtils.getPerformanceMetrics).toHaveBeenCalledTimes(3); // Initial + manual + auto-refresh\n    });\n\n    jest.useRealTimers();\n  });\n\n  test('stops auto-refresh when detailed dashboard is hidden', async () => {\n    const user = userEvent.setup();\n\n    jest.useFakeTimers();\n\n    renderDocumentationWithTheme();\n\n    // Open performance section and show dashboard\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n    await user.click(performanceButton);\n\n    const showDashboardButton = screen.getByRole('button', {\n      name: /Show Detailed Dashboard/i,\n    });\n    await user.click(showDashboardButton);\n\n    // Hide dashboard\n    const hideDashboardButton = screen.getByRole('button', {\n      name: /Hide Detailed Dashboard/i,\n    });\n    await user.click(hideDashboardButton);\n\n    // Fast-forward time - should not trigger additional refreshes\n    act(() => {\n      jest.advanceTimersByTime(10000);\n    });\n\n    // Should not have additional calls beyond initial setup\n    expect(performanceUtils.getPerformanceMetrics).toHaveBeenCalledTimes(2); // Initial + manual only\n\n    jest.useRealTimers();\n  });\n\n  test('renders performance features documentation', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n    await user.click(performanceButton);\n\n    expect(screen.getByText(/Web Vitals Monitoring/i)).toBeInTheDocument();\n    expect(screen.getByText(/API Performance/i)).toBeInTheDocument();\n    expect(screen.getByText(/Memory Monitoring/i)).toBeInTheDocument();\n    expect(screen.getByText(/Error Tracking/i)).toBeInTheDocument();\n  });\n\n  test('renders developer tools documentation', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n    await user.click(performanceButton);\n\n    expect(screen.getByText(/Ctrl\\+Shift\\+P/i)).toBeInTheDocument();\n    expect(screen.getByText(/window\\.performanceUtils/i)).toBeInTheDocument();\n  });\n\n  test('renders performance optimisation tips', async () => {\n    const user = userEvent.setup();\n    renderDocumentationWithTheme();\n\n    const performanceButton = screen.getByRole('button', {\n      name: /ðŸš€ Performance Monitoring/i,\n    });\n    await user.click(performanceButton);\n\n    expect(screen.getByText(/Performance Optimisation Tips/i)).toBeInTheDocument();\n    expect(screen.getByText(/Monitor memory usage regularly/i)).toBeInTheDocument();\n    expect(screen.getByText(/Keep API response times under 500ms/i)).toBeInTheDocument();\n  });\n});\n"],"names":["jest","mock","getPerformanceMetrics","fn","logPerformanceSummary","exportPerformanceData","initPerformanceMonitoring","apiService","health","addConnectionListener","removeConnectionListener","MockPerformanceDashboard","isVisible","embedded","div","data-testid","span","MockPerformanceOverview","metrics","MockPerformanceHealthIndicator","backendStatus","global","fetch","mockPerformanceMetrics","session","duration","start","Date","now","apiCalls","total","successful","failed","averageResponseTime","slowCalls","userInteractions","slowInteractions","errors","recent","memory","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","usedPercentage","webVitals","lcp","value","rating","fid","cls","connection","effectiveType","downlink","rtt","mockBackendMetrics","status","uptime","errorRate","renderDocumentationWithTheme","render","ThemeProvider","Documentation","describe","beforeEach","clearAllMocks","performanceUtils","mockReturnValue","mockResolvedValue","mockImplementation","url","includes","Promise","resolve","ok","json","reject","Error","URL","createObjectURL","revokeObjectURL","mockElement","href","download","click","document","createElement","body","appendChild","removeChild","afterEach","restoreAllMocks","test","performanceButton","screen","getByRole","name","expect","toBeInTheDocument","user","userEvent","setup","getByText","getByTestId","queryByTestId","not","showDashboardButton","toHaveTextContent","hideDashboardButton","waitFor","toHaveBeenCalled","refreshButton","toHaveBeenCalledTimes","toHaveBeenCalledWith","exportButton","logButton","mockRejectedValue","useFakeTimers","act","advanceTimersByTime","useRealTimers"],"mappings":"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"}