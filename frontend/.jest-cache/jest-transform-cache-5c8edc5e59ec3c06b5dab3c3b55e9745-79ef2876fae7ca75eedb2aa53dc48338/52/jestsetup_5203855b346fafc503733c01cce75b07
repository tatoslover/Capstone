e569ca10693bb6add8a7b2f47e2d8860
"use strict";
// Mock Next.js Image component
jest.mock("next/image", ()=>({
        __esModule: true,
        default: (props)=>{
            // eslint-disable-next-line jsx-a11y/alt-text, @next/next/no-img-element
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                ...props
            });
        }
    }));
// Mock Next.js Link component
jest.mock("next/link", ()=>({
        __esModule: true,
        default: ({ children, href, ...props })=>{
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                href: href,
                ...props,
                children: children
            });
        }
    }));
// Mock Next.js router
jest.mock("next/router", ()=>({
        useRouter: ()=>({
                route: "/",
                pathname: "/",
                query: {},
                asPath: "/",
                push: jest.fn(),
                replace: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                prefetch: jest.fn(),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                }
            })
    }));
// Mock CSS modules
jest.mock("*.module.css", ()=>({}));
jest.mock("*.module.scss", ()=>({}));
jest.mock("*.module.sass", ()=>({}));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, "localStorage", {
    value: localStorageMock
});
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, "sessionStorage", {
    value: sessionStorageMock
});
// Mock window.matchMedia
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(cb){
        this.cb = cb;
    }
    observe() {}
    unobserve() {}
    disconnect() {}
};
// Mock fetch globally
global.fetch = jest.fn();
// Mock console methods to reduce noise in tests
const originalError = console.error;
const originalWarn = console.warn;
beforeEach(()=>{
    console.error = jest.fn();
    console.warn = jest.fn();
});
afterEach(()=>{
    console.error = originalError;
    console.warn = originalWarn;
});
// Custom matchers for better testing
expect.extend({
    toBeWithinRange (received, floor, ceiling) {
        const pass = received >= floor && received <= ceiling;
        if (pass) {
            return {
                message: ()=>`expected ${received} not to be within range ${floor} - ${ceiling}`,
                pass: true
            };
        } else {
            return {
                message: ()=>`expected ${received} to be within range ${floor} - ${ceiling}`,
                pass: false
            };
        }
    }
});
// Set up environment variables for testing
process.env.NEXT_PUBLIC_API_URL = "http://localhost:3001";
process.env.NODE_ENV = "test";
// Global test utilities
global.testUtils = {
    // Helper to create mock user
    createMockUser: (overrides = {})=>({
            id: 1,
            username: "testuser",
            created_at: "2023-01-01T00:00:00Z",
            ...overrides
        }),
    // Helper to create mock card
    createMockCard: (overrides = {})=>({
            id: "abc123",
            name: "Lightning Bolt",
            mana_cost: "{R}",
            type_line: "Instant",
            oracle_text: "Lightning Bolt deals 3 damage to any target.",
            ...overrides
        }),
    // Helper to create mock favourite
    createMockFavourite: (overrides = {})=>({
            id: 1,
            user_id: 1,
            card_name: "Lightning Bolt",
            scryfall_id: "abc123",
            ability_type: "instant",
            notes: "Great damage spell",
            created_at: "2023-01-01T00:00:00Z",
            ...overrides
        }),
    // Helper to wait for async operations
    waitForAsync: ()=>new Promise((resolve)=>setTimeout(resolve, 0)),
    // Helper to trigger resize events
    triggerResize: ()=>{
        global.dispatchEvent(new Event("resize"));
    }
};
// Clean up after each test
afterEach(()=>{
    // Clear all mocks
    jest.clearAllMocks();
    // Reset fetch mock
    if (global.fetch && global.fetch.mockClear) {
        global.fetch.mockClear();
    }
    // Clear localStorage
    localStorageMock.getItem.mockClear();
    localStorageMock.setItem.mockClear();
    localStorageMock.removeItem.mockClear();
    localStorageMock.clear.mockClear();
    // Clear sessionStorage
    sessionStorageMock.getItem.mockClear();
    sessionStorageMock.setItem.mockClear();
    sessionStorageMock.removeItem.mockClear();
    sessionStorageMock.clear.mockClear();
});

//# sourceMappingURL=data:application/json;base64,