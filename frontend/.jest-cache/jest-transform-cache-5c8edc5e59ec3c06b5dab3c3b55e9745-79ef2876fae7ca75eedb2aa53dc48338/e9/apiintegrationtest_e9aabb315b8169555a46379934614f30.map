{"version":3,"sources":["/Users/samuellove/Documents/GitHub/Capstone/frontend/tests/api-integration.test.js"],"sourcesContent":["import { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport \"@testing-library/jest-dom\";\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe(\"Frontend-Backend API Integration Tests\", () => {\n  const API_URL = \"http://localhost:3001\";\n\n  beforeEach(() => {\n    fetch.mockClear();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe(\"User API Integration\", () => {\n    test(\"should create user via API\", async () => {\n      const newUser = {\n        id: 1,\n        username: \"testuser\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 201,\n        json: async () => newUser,\n      });\n\n      const response = await fetch(`${API_URL}/api/users`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username: \"testuser\" }),\n      });\n\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/users`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username: \"testuser\" }),\n      });\n\n      expect(response.ok).toBe(true);\n      expect(response.status).toBe(201);\n      expect(data).toEqual(newUser);\n    });\n\n    test(\"should fetch all users via API\", async () => {\n      const users = [\n        { id: 1, username: \"user1\", created_at: \"2023-01-01T00:00:00Z\" },\n        { id: 2, username: \"user2\", created_at: \"2023-01-02T00:00:00Z\" },\n      ];\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => users,\n      });\n\n      const response = await fetch(`${API_URL}/api/users`);\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/users`);\n      expect(response.ok).toBe(true);\n      expect(data).toEqual(users);\n      expect(data).toHaveLength(2);\n    });\n\n    test(\"should update user via API\", async () => {\n      const updatedUser = {\n        id: 1,\n        username: \"updateduser\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => updatedUser,\n      });\n\n      const response = await fetch(`${API_URL}/api/users/1`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username: \"updateduser\" }),\n      });\n\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/users/1`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username: \"updateduser\" }),\n      });\n\n      expect(response.ok).toBe(true);\n      expect(data.username).toBe(\"updateduser\");\n    });\n\n    test(\"should delete user via API\", async () => {\n      const deleteResponse = {\n        message: \"User deleted\",\n        deleted: { id: 1, username: \"testuser\" },\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => deleteResponse,\n      });\n\n      const response = await fetch(`${API_URL}/api/users/1`, {\n        method: \"DELETE\",\n      });\n\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/users/1`, {\n        method: \"DELETE\",\n      });\n\n      expect(response.ok).toBe(true);\n      expect(data.message).toBe(\"User deleted\");\n      expect(data.deleted.id).toBe(1);\n    });\n\n    test(\"should handle user API errors\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({ error: \"Username already exists\" }),\n      });\n\n      const response = await fetch(`${API_URL}/api/users`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username: \"duplicateuser\" }),\n      });\n\n      const data = await response.json();\n\n      expect(response.ok).toBe(false);\n      expect(response.status).toBe(400);\n      expect(data.error).toBe(\"Username already exists\");\n    });\n  });\n\n  describe(\"Favourites API Integration\", () => {\n    test(\"should add favourite via API\", async () => {\n      const favourite = {\n        id: 1,\n        user_id: 1,\n        card_name: \"Lightning Bolt\",\n        scryfall_id: \"abc123\",\n        ability_type: \"instant\",\n        notes: \"Classic red damage spell\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 201,\n        json: async () => favourite,\n      });\n\n      const favouriteData = {\n        user_id: 1,\n        card_name: \"Lightning Bolt\",\n        scryfall_id: \"abc123\",\n        ability_type: \"instant\",\n        notes: \"Classic red damage spell\",\n      };\n\n      const response = await fetch(`${API_URL}/api/favourites`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(favouriteData),\n      });\n\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/favourites`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(favouriteData),\n      });\n\n      expect(response.ok).toBe(true);\n      expect(response.status).toBe(201);\n      expect(data).toEqual(favourite);\n    });\n\n    test(\"should fetch user favourites via API\", async () => {\n      const favourites = [\n        {\n          id: 1,\n          user_id: 1,\n          card_name: \"Lightning Bolt\",\n          scryfall_id: \"abc123\",\n          ability_type: \"instant\",\n          notes: \"Great damage spell\",\n          created_at: \"2023-01-01T00:00:00Z\",\n        },\n        {\n          id: 2,\n          user_id: 1,\n          card_name: \"Counterspell\",\n          scryfall_id: \"def456\",\n          ability_type: \"counter\",\n          notes: \"Essential blue spell\",\n          created_at: \"2023-01-02T00:00:00Z\",\n        },\n      ];\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => favourites,\n      });\n\n      const response = await fetch(`${API_URL}/api/favourites/1`);\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/favourites/1`);\n      expect(response.ok).toBe(true);\n      expect(data).toEqual(favourites);\n      expect(data).toHaveLength(2);\n    });\n\n    test(\"should update favourite notes via API\", async () => {\n      const updatedFavourite = {\n        id: 1,\n        user_id: 1,\n        card_name: \"Lightning Bolt\",\n        scryfall_id: \"abc123\",\n        ability_type: \"damage\",\n        notes: \"Updated: Excellent damage spell for aggressive decks\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => updatedFavourite,\n      });\n\n      const updateData = {\n        notes: \"Updated: Excellent damage spell for aggressive decks\",\n        ability_type: \"damage\",\n      };\n\n      const response = await fetch(`${API_URL}/api/favourites/1`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/favourites/1`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      expect(response.ok).toBe(true);\n      expect(data.notes).toBe(\n        \"Updated: Excellent damage spell for aggressive decks\",\n      );\n      expect(data.ability_type).toBe(\"damage\");\n    });\n\n    test(\"should remove favourite via API\", async () => {\n      const deleteResponse = {\n        message: \"Favourite removed\",\n        deleted: {\n          id: 1,\n          user_id: 1,\n          card_name: \"Lightning Bolt\",\n        },\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => deleteResponse,\n      });\n\n      const response = await fetch(`${API_URL}/api/favourites/1`, {\n        method: \"DELETE\",\n      });\n\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/favourites/1`, {\n        method: \"DELETE\",\n      });\n\n      expect(response.ok).toBe(true);\n      expect(data.message).toBe(\"Favourite removed\");\n      expect(data.deleted.id).toBe(1);\n    });\n\n    test(\"should handle favourites validation errors\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({ error: \"User ID and card name are required\" }),\n      });\n\n      const response = await fetch(`${API_URL}/api/favourites`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ user_id: 1 }), // Missing card_name\n      });\n\n      const data = await response.json();\n\n      expect(response.ok).toBe(false);\n      expect(response.status).toBe(400);\n      expect(data.error).toBe(\"User ID and card name are required\");\n    });\n  });\n\n  describe(\"Card Search API Integration\", () => {\n    test(\"should search cards via Scryfall API proxy\", async () => {\n      const searchResults = {\n        data: [\n          {\n            id: \"abc123\",\n            name: \"Lightning Bolt\",\n            mana_cost: \"{R}\",\n            type_line: \"Instant\",\n            oracle_text: \"Lightning Bolt deals 3 damage to any target.\",\n          },\n          {\n            id: \"def456\",\n            name: \"Lightning Strike\",\n            mana_cost: \"{1}{R}\",\n            type_line: \"Instant\",\n            oracle_text: \"Lightning Strike deals 3 damage to any target.\",\n          },\n        ],\n        has_more: false,\n        total_cards: 2,\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => searchResults,\n      });\n\n      const searchQuery = \"lightning\";\n      const response = await fetch(\n        `${API_URL}/api/cards/search?q=${encodeURIComponent(searchQuery)}`,\n      );\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(\n        `${API_URL}/api/cards/search?q=lightning`,\n      );\n      expect(response.ok).toBe(true);\n      expect(data.data).toHaveLength(2);\n      expect(data.data[0].name).toBe(\"Lightning Bolt\");\n      expect(data.total_cards).toBe(2);\n    });\n\n    test(\"should get random cards via API\", async () => {\n      const randomCards = {\n        data: [\n          {\n            id: \"xyz789\",\n            name: \"Serra Angel\",\n            mana_cost: \"{3}{W}{W}\",\n            type_line: \"Creature — Angel\",\n            oracle_text: \"Flying, vigilance\",\n          },\n        ],\n        has_more: true,\n        total_cards: 1,\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => randomCards,\n      });\n\n      const response = await fetch(`${API_URL}/api/cards/random`);\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/cards/random`);\n      expect(response.ok).toBe(true);\n      expect(data.data).toHaveLength(1);\n      expect(data.data[0].name).toBe(\"Serra Angel\");\n    });\n\n    test(\"should get random cards with ability filter\", async () => {\n      const flyingCards = {\n        data: [\n          {\n            id: \"fly123\",\n            name: \"Wind Drake\",\n            mana_cost: \"{2}{U}\",\n            type_line: \"Creature — Drake\",\n            oracle_text: \"Flying\",\n          },\n          {\n            id: \"fly456\",\n            name: \"Air Elemental\",\n            mana_cost: \"{3}{U}{U}\",\n            type_line: \"Creature — Elemental\",\n            oracle_text: \"Flying\",\n          },\n        ],\n        has_more: true,\n        total_cards: 2,\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => flyingCards,\n      });\n\n      const response = await fetch(\n        `${API_URL}/api/cards/random?ability=flying`,\n      );\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(\n        `${API_URL}/api/cards/random?ability=flying`,\n      );\n      expect(response.ok).toBe(true);\n      expect(data.data).toHaveLength(2);\n      expect(\n        data.data.every((card) => card.oracle_text.includes(\"Flying\")),\n      ).toBe(true);\n    });\n\n    test(\"should get specific card by ID\", async () => {\n      const specificCard = {\n        id: \"abc123\",\n        name: \"Lightning Bolt\",\n        mana_cost: \"{R}\",\n        type_line: \"Instant\",\n        oracle_text: \"Lightning Bolt deals 3 damage to any target.\",\n        image_uris: {\n          normal: \"https://example.com/card.jpg\",\n        },\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => specificCard,\n      });\n\n      const cardId = \"abc123\";\n      const response = await fetch(`${API_URL}/api/cards/${cardId}`);\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/cards/${cardId}`);\n      expect(response.ok).toBe(true);\n      expect(data.id).toBe(cardId);\n      expect(data.name).toBe(\"Lightning Bolt\");\n    });\n\n    test(\"should handle card search with no results\", async () => {\n      const noResults = {\n        data: [],\n        has_more: false,\n        total_cards: 0,\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => noResults,\n      });\n\n      const response = await fetch(\n        `${API_URL}/api/cards/search?q=nonexistentcard123`,\n      );\n      const data = await response.json();\n\n      expect(response.ok).toBe(true);\n      expect(data.data).toEqual([]);\n      expect(data.total_cards).toBe(0);\n    });\n\n    test(\"should handle invalid card ID\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 404,\n        json: async () => ({ error: \"Card not found\" }),\n      });\n\n      const response = await fetch(`${API_URL}/api/cards/invalid-id`);\n      const data = await response.json();\n\n      expect(response.ok).toBe(false);\n      expect(response.status).toBe(404);\n      expect(data.error).toBe(\"Card not found\");\n    });\n\n    test(\"should require search query parameter\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({ error: \"Search query (q) is required\" }),\n      });\n\n      const response = await fetch(`${API_URL}/api/cards/search`);\n      const data = await response.json();\n\n      expect(response.ok).toBe(false);\n      expect(response.status).toBe(400);\n      expect(data.error).toBe(\"Search query (q) is required\");\n    });\n  });\n\n  describe(\"Messages API Integration\", () => {\n    test(\"should create message via API\", async () => {\n      const newMessage = {\n        id: 1,\n        text: \"How does flying work?\",\n        created_at: \"2023-01-01T00:00:00Z\",\n        updated_at: \"2023-01-01T00:00:00Z\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 201,\n        json: async () => newMessage,\n      });\n\n      const messageData = { text: \"How does flying work?\" };\n      const response = await fetch(`${API_URL}/api/messages`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(messageData),\n      });\n\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/messages`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(messageData),\n      });\n\n      expect(response.ok).toBe(true);\n      expect(response.status).toBe(201);\n      expect(data.text).toBe(\"How does flying work?\");\n    });\n\n    test(\"should fetch all messages via API\", async () => {\n      const messages = [\n        {\n          id: 1,\n          text: \"How does flying work?\",\n          created_at: \"2023-01-01T00:00:00Z\",\n          updated_at: \"2023-01-01T00:00:00Z\",\n        },\n        {\n          id: 2,\n          text: \"What are instants?\",\n          created_at: \"2023-01-02T00:00:00Z\",\n          updated_at: \"2023-01-02T00:00:00Z\",\n        },\n      ];\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => messages,\n      });\n\n      const response = await fetch(`${API_URL}/api/messages`);\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/messages`);\n      expect(response.ok).toBe(true);\n      expect(data).toHaveLength(2);\n      expect(data[0].text).toBe(\"How does flying work?\");\n    });\n\n    test(\"should update message via API\", async () => {\n      const updatedMessage = {\n        id: 1,\n        text: \"Updated: How does the flying ability work in MTG?\",\n        created_at: \"2023-01-01T00:00:00Z\",\n        updated_at: \"2023-01-01T12:00:00Z\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => updatedMessage,\n      });\n\n      const updateData = {\n        text: \"Updated: How does the flying ability work in MTG?\",\n      };\n      const response = await fetch(`${API_URL}/api/messages/1`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/messages/1`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      expect(response.ok).toBe(true);\n      expect(data.text).toBe(\n        \"Updated: How does the flying ability work in MTG?\",\n      );\n      expect(data.updated_at).not.toBe(data.created_at);\n    });\n\n    test(\"should delete message via API\", async () => {\n      const deleteResponse = {\n        message: \"Message deleted\",\n        deleted: {\n          id: 1,\n          text: \"How does flying work?\",\n        },\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => deleteResponse,\n      });\n\n      const response = await fetch(`${API_URL}/api/messages/1`, {\n        method: \"DELETE\",\n      });\n\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/messages/1`, {\n        method: \"DELETE\",\n      });\n\n      expect(response.ok).toBe(true);\n      expect(data.message).toBe(\"Message deleted\");\n      expect(data.deleted.id).toBe(1);\n    });\n  });\n\n  describe(\"Health Check API Integration\", () => {\n    test(\"should get server health status\", async () => {\n      const healthResponse = {\n        status: \"OK\",\n        timestamp: \"2023-01-01T00:00:00Z\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => healthResponse,\n      });\n\n      const response = await fetch(`${API_URL}/health`);\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/health`);\n      expect(response.ok).toBe(true);\n      expect(data.status).toBe(\"OK\");\n      expect(data.timestamp).toBeDefined();\n    });\n\n    test(\"should get welcome message from root endpoint\", async () => {\n      const welcomeResponse = {\n        message: \"Hello World from Planeswalker's Primer Backend!\",\n        status: \"Server is running\",\n        timestamp: \"2023-01-01T00:00:00Z\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => welcomeResponse,\n      });\n\n      const response = await fetch(`${API_URL}/`);\n      const data = await response.json();\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/`);\n      expect(response.ok).toBe(true);\n      expect(data.message).toBe(\n        \"Hello World from Planeswalker's Primer Backend!\",\n      );\n      expect(data.status).toBe(\"Server is running\");\n    });\n  });\n\n  describe(\"Error Handling and Edge Cases\", () => {\n    test(\"should handle network errors\", async () => {\n      fetch.mockRejectedValueOnce(new Error(\"Network error\"));\n\n      try {\n        await fetch(`${API_URL}/api/users`);\n      } catch (error) {\n        expect(error.message).toBe(\"Network error\");\n      }\n    });\n\n    test(\"should handle server 500 errors\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        json: async () => ({ error: \"Internal server error\" }),\n      });\n\n      const response = await fetch(`${API_URL}/api/users`);\n      const data = await response.json();\n\n      expect(response.ok).toBe(false);\n      expect(response.status).toBe(500);\n      expect(data.error).toBe(\"Internal server error\");\n    });\n\n    test(\"should handle invalid JSON responses\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => {\n          throw new Error(\"Invalid JSON\");\n        },\n      });\n\n      try {\n        const response = await fetch(`${API_URL}/api/users`);\n        await response.json();\n      } catch (error) {\n        expect(error.message).toBe(\"Invalid JSON\");\n      }\n    });\n\n    test(\"should handle 404 for non-existent endpoints\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 404,\n        json: async () => ({ error: \"Route not found\" }),\n      });\n\n      const response = await fetch(`${API_URL}/api/nonexistent`);\n      const data = await response.json();\n\n      expect(response.ok).toBe(false);\n      expect(response.status).toBe(404);\n      expect(data.error).toBe(\"Route not found\");\n    });\n\n    test(\"should handle timeout scenarios\", async () => {\n      // Simulate timeout by rejecting after delay\n      fetch.mockImplementationOnce(\n        () =>\n          new Promise((_, reject) =>\n            setTimeout(() => reject(new Error(\"Request timeout\")), 100),\n          ),\n      );\n\n      try {\n        await fetch(`${API_URL}/api/users`);\n      } catch (error) {\n        expect(error.message).toBe(\"Request timeout\");\n      }\n    });\n  });\n\n  describe(\"Content-Type and Header Validation\", () => {\n    test(\"should send correct Content-Type headers for JSON requests\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 201,\n        json: async () => ({ id: 1, username: \"test\" }),\n      });\n\n      await fetch(`${API_URL}/api/users`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username: \"test\" }),\n      });\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/api/users`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username: \"test\" }),\n      });\n    });\n\n    test(\"should handle requests without explicit Content-Type\", async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => ({ status: \"OK\" }),\n      });\n\n      await fetch(`${API_URL}/health`);\n\n      expect(fetch).toHaveBeenCalledWith(`${API_URL}/health`);\n    });\n  });\n\n  describe(\"API Response Format Validation\", () => {\n    test(\"should validate user response format\", async () => {\n      const user = {\n        id: 1,\n        username: \"testuser\",\n        created_at: \"2023-01-01T00:00:00Z\",\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 201,\n        json: async () => user,\n      });\n\n      const response = await fetch(`${API_URL}/api/users`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ username: \"testuser\" }),\n      });\n\n      const data = await response.json();\n\n      // Validate response structure\n      expect(data).toHaveProperty(\"id\");\n      expect(data).toHaveProperty(\"username\");\n      expect(data).toHaveProperty(\"created_at\");\n      expect(typeof data.id).toBe(\"number\");\n      expect(typeof data.username).toBe(\"string\");\n      expect(typeof data.created_at).toBe(\"string\");\n    });\n\n    test(\"should validate card search response format\", async () => {\n      const searchResponse = {\n        data: [\n          {\n            id: \"abc123\",\n            name: \"Lightning Bolt\",\n            mana_cost: \"{R}\",\n            type_line: \"Instant\",\n          },\n        ],\n        has_more: false,\n        total_cards: 1,\n      };\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => searchResponse,\n      });\n\n      const response = await fetch(`${API_URL}/api/cards/search?q=lightning`);\n      const data = await response.json();\n\n      // Validate response structure\n      expect(data).toHaveProperty(\"data\");\n      expect(data).toHaveProperty(\"has_more\");\n      expect(data).toHaveProperty(\"total_cards\");\n      expect(Array.isArray(data.data)).toBe(true);\n      expect(typeof data.has_more).toBe(\"boolean\");\n      expect(typeof data.total_cards).toBe(\"number\");\n\n      if (data.data.length > 0) {\n        const card = data.data[0];\n        expect(card).toHaveProperty(\"id\");\n        expect(card).toHaveProperty(\"name\");\n        expect(typeof card.id).toBe(\"string\");\n        expect(typeof card.name).toBe(\"string\");\n      }\n    });\n  });\n});\n"],"names":["global","fetch","jest","fn","describe","API_URL","beforeEach","mockClear","afterEach","resetAllMocks","test","newUser","id","username","created_at","mockResolvedValueOnce","ok","status","json","response","method","headers","body","JSON","stringify","data","expect","toHaveBeenCalledWith","toBe","toEqual","users","toHaveLength","updatedUser","deleteResponse","message","deleted","error","favourite","user_id","card_name","scryfall_id","ability_type","notes","favouriteData","favourites","updatedFavourite","updateData","searchResults","name","mana_cost","type_line","oracle_text","has_more","total_cards","searchQuery","encodeURIComponent","randomCards","flyingCards","every","card","includes","specificCard","image_uris","normal","cardId","noResults","newMessage","text","updated_at","messageData","messages","updatedMessage","not","healthResponse","timestamp","toBeDefined","welcomeResponse","mockRejectedValueOnce","Error","mockImplementationOnce","Promise","_","reject","setTimeout","user","toHaveProperty","searchResponse","Array","isArray","length"],"mappings":"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"}