{"version":3,"names":["addConnectionListener","cov_uv0vwea04","f","s","apiService","default","_default","removeConnectionListener","startHealthChecks","stopHealthChecks","API_BASE_URL","b","process","env","NEXT_PUBLIC_API_URL","REQUEST_TIMEOUT","isOnline","connectionListeners","healthCheckInterval","callback","push","filter","cb","notifyConnectionChange","online","console","log","forEach","checkBackendHealth","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","signal","headers","clearTimeout","ok","data","json","success","error","status","message","clearInterval","setInterval","apiRequest","endpoint","options","Error","health","users","getAll","getById","id","create","userData","body","JSON","stringify","update","delete","favourites","getByUserId","userId","favouriteData","cards","search","query","encodedQuery","encodeURIComponent","Accept","total_cards","random","ability","url","messages","messageData","window"],"sources":["/Users/samuellove/Documents/GitHub/Capstone/frontend/services/apiService.js"],"sourcesContent":["// Simplified API Service - Direct backend communication only\n// No offline fallbacks or mock data\n\n// Configuration\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001\";\nconst REQUEST_TIMEOUT = 5000; // 5 seconds\n\n// Connection state management\nlet isOnline = true;\nlet connectionListeners = [];\nlet healthCheckInterval = null;\n\n// Add connection status listener\nexport function addConnectionListener(callback) {\n  connectionListeners.push(callback);\n  // Immediately call with current status\n  callback(isOnline);\n}\n\n// Remove connection status listener\nexport function removeConnectionListener(callback) {\n  connectionListeners = connectionListeners.filter((cb) => cb !== callback);\n}\n\n// Notify all listeners of connection status change\nfunction notifyConnectionChange(online) {\n  if (isOnline !== online) {\n    isOnline = online;\n    console.log(`ðŸ”— Backend connection: ${online ? \"ONLINE\" : \"OFFLINE\"}`);\n    connectionListeners.forEach((callback) => callback(online));\n  }\n}\n\n// Health check function\nasync function checkBackendHealth() {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);\n\n    const response = await fetch(`${API_BASE_URL}/health`, {\n      method: \"GET\",\n      signal: controller.signal,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    clearTimeout(timeoutId);\n\n    if (response.ok) {\n      const data = await response.json();\n      notifyConnectionChange(true);\n      return { success: true, data };\n    } else {\n      notifyConnectionChange(false);\n      return { success: false, error: `HTTP ${response.status}` };\n    }\n  } catch (error) {\n    notifyConnectionChange(false);\n    return { success: false, error: error.message };\n  }\n}\n\n// Start periodic health checks\nexport function startHealthChecks() {\n  if (healthCheckInterval) {\n    clearInterval(healthCheckInterval);\n  }\n\n  // Initial check\n  checkBackendHealth();\n\n  // Periodic checks every 30 seconds\n  healthCheckInterval = setInterval(checkBackendHealth, 30000);\n}\n\n// Stop health checks\nexport function stopHealthChecks() {\n  if (healthCheckInterval) {\n    clearInterval(healthCheckInterval);\n    healthCheckInterval = null;\n  }\n}\n\n// Generic API request function\nasync function apiRequest(endpoint, options = {}) {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);\n\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      signal: controller.signal,\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options.headers,\n      },\n    });\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    notifyConnectionChange(true);\n    return data;\n  } catch (error) {\n    console.error(`API request failed for ${endpoint}:`, error.message);\n    notifyConnectionChange(false);\n    throw error;\n  }\n}\n\n// Main API service\nexport const apiService = {\n  // Get current connection status\n  isOnline: () => isOnline,\n\n  // Health check\n  async health() {\n    return await apiRequest(\"/health\");\n  },\n\n  // User operations\n  users: {\n    async getAll() {\n      return await apiRequest(\"/api/users\");\n    },\n\n    async getById(id) {\n      return await apiRequest(`/api/users/${id}`);\n    },\n\n    async create(userData) {\n      return await apiRequest(\"/api/users\", {\n        method: \"POST\",\n        body: JSON.stringify(userData),\n      });\n    },\n\n    async update(id, userData) {\n      return await apiRequest(`/api/users/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(userData),\n      });\n    },\n\n    async delete(id) {\n      return await apiRequest(`/api/users/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n  },\n\n  // Favourites operations\n  favourites: {\n    async getByUserId(userId) {\n      return await apiRequest(`/api/favourites?user_id=${userId}`);\n    },\n\n    async create(favouriteData) {\n      return await apiRequest(\"/api/favourites\", {\n        method: \"POST\",\n        body: JSON.stringify(favouriteData),\n      });\n    },\n\n    async update(id, favouriteData) {\n      return await apiRequest(`/api/favourites/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(favouriteData),\n      });\n    },\n\n    async delete(id) {\n      return await apiRequest(`/api/favourites/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n  },\n\n  // Card operations - direct Scryfall API calls\n  cards: {\n    async search(query) {\n      try {\n        const encodedQuery = encodeURIComponent(query);\n        const response = await fetch(\n          `https://api.scryfall.com/cards/search?q=${encodedQuery}`,\n          {\n            method: \"GET\",\n            headers: {\n              Accept: \"application/json\",\n            },\n          },\n        );\n\n        if (!response.ok) {\n          if (response.status === 404) {\n            return { data: [], total_cards: 0 };\n          }\n          throw new Error(`Scryfall API error: ${response.status}`);\n        }\n\n        return await response.json();\n      } catch (error) {\n        console.error(\"Card search error:\", error);\n        throw error;\n      }\n    },\n\n    async random(ability) {\n      try {\n        let url = \"https://api.scryfall.com/cards/random\";\n        if (ability) {\n          url += `?q=oracle:${encodeURIComponent(ability)}`;\n        }\n\n        const response = await fetch(url, {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(`Scryfall API error: ${response.status}`);\n        }\n\n        return await response.json();\n      } catch (error) {\n        console.error(\"Random card error:\", error);\n        throw error;\n      }\n    },\n\n    async getById(id) {\n      try {\n        const response = await fetch(`https://api.scryfall.com/cards/${id}`, {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(`Scryfall API error: ${response.status}`);\n        }\n\n        return await response.json();\n      } catch (error) {\n        console.error(\"Get card by ID error:\", error);\n        throw error;\n      }\n    },\n  },\n\n  // Messages (for testing)\n  messages: {\n    async getAll() {\n      return await apiRequest(\"/api/messages\");\n    },\n\n    async create(messageData) {\n      return await apiRequest(\"/api/messages\", {\n        method: \"POST\",\n        body: JSON.stringify(messageData),\n      });\n    },\n  },\n};\n\n// Auto-start health checks when module loads\nif (typeof window !== \"undefined\") {\n  // Start health checks to detect backend availability\n  startHealthChecks();\n}\n\nexport default apiService;\n"],"mappingsgBA,qBAAqB,WAAAA,CAAA;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAArBH,qBAAA;;EAuGHI,UAAU,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAVC,UAAA;;EAmKbC,OAA0B,WAAAA,CAAA;IAAA;IAAAJ,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAA1BG,QAAA;;EAnQgBC,wBAAwB,WAAAA,CAAA;IAAA;IAAAN,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAxBI,wBAAA;;EA4CAC,iBAAiB,WAAAA,CAAA;IAAA;IAAAP,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAjBK,iBAAA;;EAaAC,gBAAgB,WAAAA,CAAA;IAAA;IAAAR,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAhBM,gBAAA;;;AAzEhB,MAAMC,YAAA;AAAA;AAAA,CAAAT,aAAA,GAAAE,CAAA;AAAe;AAAA,CAAAF,aAAA,GAAAU,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACC,mBAAmB;AAAA;AAAA,CAAAb,aAAA,GAAAU,CAAA,UAAI;AACxD,MAAMI,eAAA;AAAA;AAAA,CAAAd,aAAA,GAAAE,CAAA,QAAkB,OAAM;AAE9B;AACA,IAAIa,QAAA;AAAA;AAAA,CAAAf,aAAA,GAAAE,CAAA,QAAW;AACf,IAAIc,mBAAA;AAAA;AAAA,CAAAhB,aAAA,GAAAE,CAAA,QAAsB,EAAE;AAC5B,IAAIe,mBAAA;AAAA;AAAA,CAAAjB,aAAA,GAAAE,CAAA,QAAsB;AAGnB,SAASH,sBAAsBmB,QAAQ;EAAA;EAAAlB,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC5Cc,mBAAA,CAAoBG,IAAI,CAACD,QAAA;EACzB;EAAA;EAAAlB,aAAA,GAAAE,CAAA;EACAgB,QAAA,CAASH,QAAA;AACX;AAGO,SAAST,yBAAyBY,QAAQ;EAAA;EAAAlB,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC/Cc,mBAAA,GAAsBA,mBAAA,CAAoBI,MAAM,CAAEC,EAAA,IAAO;IAAA;IAAArB,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAAA,OAAAmB,EAAA,KAAOH,QAAA;EAAA;AAClE;AAEA;AACA,SAASI,uBAAuBC,MAAM;EAAA;EAAAvB,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACpC,IAAIa,QAAA,KAAaQ,MAAA,EAAQ;IAAA;IAAAvB,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAE,CAAA;IACvBa,QAAA,GAAWQ,MAAA;IAAA;IAAAvB,aAAA,GAAAE,CAAA;IACXsB,OAAA,CAAQC,GAAG,CAAC,0BAA0BF,MAAA;IAAA;IAAA,CAAAvB,aAAA,GAAAU,CAAA,UAAS;IAAA;IAAA,CAAAV,aAAA,GAAAU,CAAA,UAAW,YAAW;IAAA;IAAAV,aAAA,GAAAE,CAAA;IACrEc,mBAAA,CAAoBU,OAAO,CAAER,QAAA,IAAa;MAAA;MAAAlB,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MAAA,OAAAgB,QAAA,CAASK,MAAA;IAAA;EACrD;EAAA;EAAA;IAAAvB,aAAA,GAAAU,CAAA;EAAA;AACF;AAEA;AACA,eAAeiB,mBAAA;EAAA;EAAA3B,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACb,IAAI;IACF,MAAM0B,UAAA;IAAA;IAAA,CAAA5B,aAAA,GAAAE,CAAA,QAAa,IAAI2B,eAAA;IACvB,MAAMC,SAAA;IAAA;IAAA,CAAA9B,aAAA,GAAAE,CAAA,QAAY6B,UAAA,CAAW,MAAM;MAAA;MAAA/B,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MAAA,OAAA0B,UAAA,CAAWI,KAAK;IAAA,GAAIlB,eAAA;IAEvD,MAAMmB,QAAA;IAAA;IAAA,CAAAjC,aAAA,GAAAE,CAAA,QAAW,MAAMgC,KAAA,CAAM,GAAGzB,YAAA,SAAqB,EAAE;MACrD0B,MAAA,EAAQ;MACRC,MAAA,EAAQR,UAAA,CAAWQ,MAAM;MACzBC,OAAA,EAAS;QACP,gBAAgB;MAClB;IACF;IAAA;IAAArC,aAAA,GAAAE,CAAA;IAEAoC,YAAA,CAAaR,SAAA;IAAA;IAAA9B,aAAA,GAAAE,CAAA;IAEb,IAAI+B,QAAA,CAASM,EAAE,EAAE;MAAA;MAAAvC,aAAA,GAAAU,CAAA;MACf,MAAM8B,IAAA;MAAA;MAAA,CAAAxC,aAAA,GAAAE,CAAA,QAAO,MAAM+B,QAAA,CAASQ,IAAI;MAAA;MAAAzC,aAAA,GAAAE,CAAA;MAChCoB,sBAAA,CAAuB;MAAA;MAAAtB,aAAA,GAAAE,CAAA;MACvB,OAAO;QAAEwC,OAAA,EAAS;QAAMF;MAAK;IAC/B,OAAO;MAAA;MAAAxC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAE,CAAA;MACLoB,sBAAA,CAAuB;MAAA;MAAAtB,aAAA,GAAAE,CAAA;MACvB,OAAO;QAAEwC,OAAA,EAAS;QAAOC,KAAA,EAAO,QAAQV,QAAA,CAASW,MAAM;MAAG;IAC5D;EACF,EAAE,OAAOD,KAAA,EAAO;IAAA;IAAA3C,aAAA,GAAAE,CAAA;IACdoB,sBAAA,CAAuB;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IACvB,OAAO;MAAEwC,OAAA,EAAS;MAAOC,KAAA,EAAOA,KAAA,CAAME;IAAQ;EAChD;AACF;AAGO,SAAStC,kBAAA;EAAA;EAAAP,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACd,IAAIe,mBAAA,EAAqB;IAAA;IAAAjB,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAE,CAAA;IACvB4C,aAAA,CAAc7B,mBAAA;EAChB;EAAA;EAAA;IAAAjB,aAAA,GAAAU,CAAA;EAAA;EAEA;EAAAV,aAAA,GAAAE,CAAA;EACAyB,kBAAA;EAEA;EAAA;EAAA3B,aAAA,GAAAE,CAAA;EACAe,mBAAA,GAAsB8B,WAAA,CAAYpB,kBAAA,EAAoB;AACxD;AAGO,SAASnB,iBAAA;EAAA;EAAAR,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACd,IAAIe,mBAAA,EAAqB;IAAA;IAAAjB,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAE,CAAA;IACvB4C,aAAA,CAAc7B,mBAAA;IAAA;IAAAjB,aAAA,GAAAE,CAAA;IACde,mBAAA,GAAsB;EACxB;EAAA;EAAA;IAAAjB,aAAA,GAAAU,CAAA;EAAA;AACF;AAEA;AACA,eAAesC,WAAWC,QAAQ,EAAEC,OAAA;AAAA;AAAA,CAAAlD,aAAA,GAAAU,CAAA,UAAU,CAAC,CAAC;EAAA;EAAAV,aAAA,GAAAC,CAAA;EAC9C,MAAM2B,UAAA;EAAA;EAAA,CAAA5B,aAAA,GAAAE,CAAA,QAAa,IAAI2B,eAAA;EACvB,MAAMC,SAAA;EAAA;EAAA,CAAA9B,aAAA,GAAAE,CAAA,QAAY6B,UAAA,CAAW,MAAM;IAAA;IAAA/B,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAAA,OAAA0B,UAAA,CAAWI,KAAK;EAAA,GAAIlB,eAAA;EAAA;EAAAd,aAAA,GAAAE,CAAA;EAEvD,IAAI;IACF,MAAM+B,QAAA;IAAA;IAAA,CAAAjC,aAAA,GAAAE,CAAA,QAAW,MAAMgC,KAAA,CAAM,GAAGzB,YAAA,GAAewC,QAAA,EAAU,EAAE;MACzDb,MAAA,EAAQR,UAAA,CAAWQ,MAAM;MACzB,GAAGc,OAAO;MACVb,OAAA,EAAS;QACP,gBAAgB;QAChB,GAAGa,OAAA,CAAQb;MACb;IACF;IAAA;IAAArC,aAAA,GAAAE,CAAA;IAEAoC,YAAA,CAAaR,SAAA;IAAA;IAAA9B,aAAA,GAAAE,CAAA;IAEb,IAAI,CAAC+B,QAAA,CAASM,EAAE,EAAE;MAAA;MAAAvC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAE,CAAA;MAChB,MAAM,IAAIiD,KAAA,CAAM,cAAclB,QAAA,CAASW,MAAM,EAAE;IACjD;IAAA;IAAA;MAAA5C,aAAA,GAAAU,CAAA;IAAA;IAEA,MAAM8B,IAAA;IAAA;IAAA,CAAAxC,aAAA,GAAAE,CAAA,QAAO,MAAM+B,QAAA,CAASQ,IAAI;IAAA;IAAAzC,aAAA,GAAAE,CAAA;IAChCoB,sBAAA,CAAuB;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IACvB,OAAOsC,IAAA;EACT,EAAE,OAAOG,KAAA,EAAO;IAAA;IAAA3C,aAAA,GAAAE,CAAA;IACdsB,OAAA,CAAQmB,KAAK,CAAC,0BAA0BM,QAAA,GAAW,EAAEN,KAAA,CAAME,OAAO;IAAA;IAAA7C,aAAA,GAAAE,CAAA;IAClEoB,sBAAA,CAAuB;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IACvB,MAAMyC,KAAA;EACR;AACF;AAGO,MAAMxC,UAAA;AAAA;AAAA,CAAAH,aAAA,GAAAE,CAAA,QAAa;EACxB;EACAa,QAAA,EAAUA,CAAA,KAAMA;IAAAA;IAAAA,uBAAA;IAAAA,uBAAA;IAAAA,MAAA,CAAAA,QAAA;EAAA;EAEhB;EACA,MAAMqC,OAAA;IAAA;IAAApD,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACJ,OAAO,MAAM8C,UAAA,CAAW;EAC1B;EAEA;EACAK,KAAA,EAAO;IACL,MAAMC,OAAA;MAAA;MAAAtD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACJ,OAAO,MAAM8C,UAAA,CAAW;IAC1B;IAEA,MAAMO,QAAQC,EAAE;MAAA;MAAAxD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACd,OAAO,MAAM8C,UAAA,CAAW,cAAcQ,EAAA,EAAI;IAC5C;IAEA,MAAMC,OAAOC,QAAQ;MAAA;MAAA1D,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACnB,OAAO,MAAM8C,UAAA,CAAW,cAAc;QACpCb,MAAA,EAAQ;QACRwB,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAACH,QAAA;MACvB;IACF;IAEA,MAAMI,OAAON,EAAE,EAAEE,QAAQ;MAAA;MAAA1D,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACvB,OAAO,MAAM8C,UAAA,CAAW,cAAcQ,EAAA,EAAI,EAAE;QAC1CrB,MAAA,EAAQ;QACRwB,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAACH,QAAA;MACvB;IACF;IAEA,MAAMK,OAAOP,EAAE;MAAA;MAAAxD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACb,OAAO,MAAM8C,UAAA,CAAW,cAAcQ,EAAA,EAAI,EAAE;QAC1CrB,MAAA,EAAQ;MACV;IACF;EACF;EAEA;EACA6B,UAAA,EAAY;IACV,MAAMC,YAAYC,MAAM;MAAA;MAAAlE,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACtB,OAAO,MAAM8C,UAAA,CAAW,2BAA2BkB,MAAA,EAAQ;IAC7D;IAEA,MAAMT,OAAOU,aAAa;MAAA;MAAAnE,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACxB,OAAO,MAAM8C,UAAA,CAAW,mBAAmB;QACzCb,MAAA,EAAQ;QACRwB,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAACM,aAAA;MACvB;IACF;IAEA,MAAML,OAAON,EAAE,EAAEW,aAAa;MAAA;MAAAnE,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MAC5B,OAAO,MAAM8C,UAAA,CAAW,mBAAmBQ,EAAA,EAAI,EAAE;QAC/CrB,MAAA,EAAQ;QACRwB,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAACM,aAAA;MACvB;IACF;IAEA,MAAMJ,OAAOP,EAAE;MAAA;MAAAxD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACb,OAAO,MAAM8C,UAAA,CAAW,mBAAmBQ,EAAA,EAAI,EAAE;QAC/CrB,MAAA,EAAQ;MACV;IACF;EACF;EAEA;EACAiC,KAAA,EAAO;IACL,MAAMC,OAAOC,KAAK;MAAA;MAAAtE,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MAChB,IAAI;QACF,MAAMqE,YAAA;QAAA;QAAA,CAAAvE,aAAA,GAAAE,CAAA,QAAesE,kBAAA,CAAmBF,KAAA;QACxC,MAAMrC,QAAA;QAAA;QAAA,CAAAjC,aAAA,GAAAE,CAAA,QAAW,MAAMgC,KAAA,CACrB,2CAA2CqC,YAAA,EAAc,EACzD;UACEpC,MAAA,EAAQ;UACRE,OAAA,EAAS;YACPoC,MAAA,EAAQ;UACV;QACF;QAAA;QAAAzE,aAAA,GAAAE,CAAA;QAGF,IAAI,CAAC+B,QAAA,CAASM,EAAE,EAAE;UAAA;UAAAvC,aAAA,GAAAU,CAAA;UAAAV,aAAA,GAAAE,CAAA;UAChB,IAAI+B,QAAA,CAASW,MAAM,KAAK,KAAK;YAAA;YAAA5C,aAAA,GAAAU,CAAA;YAAAV,aAAA,GAAAE,CAAA;YAC3B,OAAO;cAAEsC,IAAA,EAAM,EAAE;cAAEkC,WAAA,EAAa;YAAE;UACpC;UAAA;UAAA;YAAA1E,aAAA,GAAAU,CAAA;UAAA;UAAAV,aAAA,GAAAE,CAAA;UACA,MAAM,IAAIiD,KAAA,CAAM,uBAAuBlB,QAAA,CAASW,MAAM,EAAE;QAC1D;QAAA;QAAA;UAAA5C,aAAA,GAAAU,CAAA;QAAA;QAAAV,aAAA,GAAAE,CAAA;QAEA,OAAO,MAAM+B,QAAA,CAASQ,IAAI;MAC5B,EAAE,OAAOE,KAAA,EAAO;QAAA;QAAA3C,aAAA,GAAAE,CAAA;QACdsB,OAAA,CAAQmB,KAAK,CAAC,sBAAsBA,KAAA;QAAA;QAAA3C,aAAA,GAAAE,CAAA;QACpC,MAAMyC,KAAA;MACR;IACF;IAEA,MAAMgC,OAAOC,OAAO;MAAA;MAAA5E,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MAClB,IAAI;QACF,IAAI2E,GAAA;QAAA;QAAA,CAAA7E,aAAA,GAAAE,CAAA,QAAM;QAAA;QAAAF,aAAA,GAAAE,CAAA;QACV,IAAI0E,OAAA,EAAS;UAAA;UAAA5E,aAAA,GAAAU,CAAA;UAAAV,aAAA,GAAAE,CAAA;UACX2E,GAAA,IAAO,aAAaL,kBAAA,CAAmBI,OAAA,GAAU;QACnD;QAAA;QAAA;UAAA5E,aAAA,GAAAU,CAAA;QAAA;QAEA,MAAMuB,QAAA;QAAA;QAAA,CAAAjC,aAAA,GAAAE,CAAA,QAAW,MAAMgC,KAAA,CAAM2C,GAAA,EAAK;UAChC1C,MAAA,EAAQ;UACRE,OAAA,EAAS;YACPoC,MAAA,EAAQ;UACV;QACF;QAAA;QAAAzE,aAAA,GAAAE,CAAA;QAEA,IAAI,CAAC+B,QAAA,CAASM,EAAE,EAAE;UAAA;UAAAvC,aAAA,GAAAU,CAAA;UAAAV,aAAA,GAAAE,CAAA;UAChB,MAAM,IAAIiD,KAAA,CAAM,uBAAuBlB,QAAA,CAASW,MAAM,EAAE;QAC1D;QAAA;QAAA;UAAA5C,aAAA,GAAAU,CAAA;QAAA;QAAAV,aAAA,GAAAE,CAAA;QAEA,OAAO,MAAM+B,QAAA,CAASQ,IAAI;MAC5B,EAAE,OAAOE,KAAA,EAAO;QAAA;QAAA3C,aAAA,GAAAE,CAAA;QACdsB,OAAA,CAAQmB,KAAK,CAAC,sBAAsBA,KAAA;QAAA;QAAA3C,aAAA,GAAAE,CAAA;QACpC,MAAMyC,KAAA;MACR;IACF;IAEA,MAAMY,QAAQC,EAAE;MAAA;MAAAxD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACd,IAAI;QACF,MAAM+B,QAAA;QAAA;QAAA,CAAAjC,aAAA,GAAAE,CAAA,QAAW,MAAMgC,KAAA,CAAM,kCAAkCsB,EAAA,EAAI,EAAE;UACnErB,MAAA,EAAQ;UACRE,OAAA,EAAS;YACPoC,MAAA,EAAQ;UACV;QACF;QAAA;QAAAzE,aAAA,GAAAE,CAAA;QAEA,IAAI,CAAC+B,QAAA,CAASM,EAAE,EAAE;UAAA;UAAAvC,aAAA,GAAAU,CAAA;UAAAV,aAAA,GAAAE,CAAA;UAChB,MAAM,IAAIiD,KAAA,CAAM,uBAAuBlB,QAAA,CAASW,MAAM,EAAE;QAC1D;QAAA;QAAA;UAAA5C,aAAA,GAAAU,CAAA;QAAA;QAAAV,aAAA,GAAAE,CAAA;QAEA,OAAO,MAAM+B,QAAA,CAASQ,IAAI;MAC5B,EAAE,OAAOE,KAAA,EAAO;QAAA;QAAA3C,aAAA,GAAAE,CAAA;QACdsB,OAAA,CAAQmB,KAAK,CAAC,yBAAyBA,KAAA;QAAA;QAAA3C,aAAA,GAAAE,CAAA;QACvC,MAAMyC,KAAA;MACR;IACF;EACF;EAEA;EACAmC,QAAA,EAAU;IACR,MAAMxB,OAAA;MAAA;MAAAtD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACJ,OAAO,MAAM8C,UAAA,CAAW;IAC1B;IAEA,MAAMS,OAAOsB,WAAW;MAAA;MAAA/E,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACtB,OAAO,MAAM8C,UAAA,CAAW,iBAAiB;QACvCb,MAAA,EAAQ;QACRwB,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAACkB,WAAA;MACvB;IACF;EACF;AACF;AAEA;AAAA;AAAA/E,aAAA,GAAAE,CAAA;AACA,IAAI,OAAO8E,MAAA,KAAW,aAAa;EAAA;EAAAhF,aAAA,GAAAU,CAAA;EAAAV,aAAA,GAAAE,CAAA;EACjC;EACAK,iBAAA;AACF;AAAA;AAAA;EAAAP,aAAA,GAAAU,CAAA;AAAA;MAEAL,QAAA;AAAA;AAAA,CAAAL,aAAA,GAAAE,CAAA,SAAeC,UAAA","ignoreList":[]}